
snakebot_spec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d2c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007ec8  08007ec8  00008ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f88  08007f88  000090ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007f88  08007f88  00008f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f90  08007f90  000090ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f90  08007f90  00008f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f94  08007f94  00008f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08007f98  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200000b0  08008044  000090b0  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200003f0  08008044  000093f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a42  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003113  00000000  00000000  0001bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0001ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d86  00000000  00000000  0001fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bf8  00000000  00000000  00020b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017064  00000000  00000000  0003872e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909f5  00000000  00000000  0004f792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a8c  00000000  00000000  000e01cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e4c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007eac 	.word	0x08007eac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	08007eac 	.word	0x08007eac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_CRC_Init+0x20>)
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <MX_CRC_Init+0x24>)
 8000eac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_CRC_Init+0x20>)
 8000eb0:	f003 faf9 	bl	80044a6 <HAL_CRC_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000eba:	f000 fca5 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000cc 	.word	0x200000cc
 8000ec8:	40023000 	.word	0x40023000

08000ecc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_CRC_MspInit+0x3c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10d      	bne.n	8000efa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_CRC_MspInit+0x40>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a09      	ldr	r2, [pc, #36]	@ (8000f0c <HAL_CRC_MspInit+0x40>)
 8000ee8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <HAL_CRC_MspInit+0x40>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023000 	.word	0x40023000
 8000f0c:	40023800 	.word	0x40023800

08000f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b34      	ldr	r3, [pc, #208]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a33      	ldr	r2, [pc, #204]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a2c      	ldr	r2, [pc, #176]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a25      	ldr	r2, [pc, #148]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9c:	481f      	ldr	r0, [pc, #124]	@ (800101c <MX_GPIO_Init+0x10c>)
 8000f9e:	f003 fcb5 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS3_Pin|CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000fa8:	481d      	ldr	r0, [pc, #116]	@ (8001020 <MX_GPIO_Init+0x110>)
 8000faa:	f003 fcaf 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	481c      	ldr	r0, [pc, #112]	@ (8001024 <MX_GPIO_Init+0x114>)
 8000fb4:	f003 fcaa 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4812      	ldr	r0, [pc, #72]	@ (800101c <MX_GPIO_Init+0x10c>)
 8000fd2:	f003 fb17 	bl	8004604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS3_Pin|CS2_Pin|CS1_Pin;
 8000fd6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_GPIO_Init+0x110>)
 8000ff0:	f003 fb08 	bl	8004604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SLEEP_Pin;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SLEEP_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <MX_GPIO_Init+0x114>)
 800100c:	f003 fafa 	bl	8004604 <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	@ 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f003 f893 	bl	8004158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f919 	bl	8001268 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  srand(HAL_GetTick());
 8001036:	f003 f8f5 	bl	8004224 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fbd3 	bl	80017e8 <srand>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f7ff ff65 	bl	8000f10 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001046:	f002 fcef 	bl	8003a28 <MX_TIM3_Init>
  MX_TIM4_Init();
 800104a:	f002 fd51 	bl	8003af0 <MX_TIM4_Init>
  MX_SPI2_Init();
 800104e:	f002 fba1 	bl	8003794 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001052:	f002 ffcf 	bl	8003ff4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001056:	f002 fc9b 	bl	8003990 <MX_TIM2_Init>
  MX_CRC_Init();
 800105a:	f7ff ff23 	bl	8000ea4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800105e:	486c      	ldr	r0, [pc, #432]	@ (8001210 <main+0x1e8>)
 8001060:	f004 fefe 	bl	8005e60 <HAL_TIM_Base_Start_IT>
	//htim3.Instance->CCR1=50;
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001064:	2100      	movs	r1, #0
 8001066:	486b      	ldr	r0, [pc, #428]	@ (8001214 <main+0x1ec>)
 8001068:	f004 ffac 	bl	8005fc4 <HAL_TIM_PWM_Start>
	//htim4.Instance->CCR1=50;
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800106c:	2100      	movs	r1, #0
 800106e:	486a      	ldr	r0, [pc, #424]	@ (8001218 <main+0x1f0>)
 8001070:	f004 ffa8 	bl	8005fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001074:	2104      	movs	r1, #4
 8001076:	4867      	ldr	r0, [pc, #412]	@ (8001214 <main+0x1ec>)
 8001078:	f004 ffa4 	bl	8005fc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	4866      	ldr	r0, [pc, #408]	@ (8001218 <main+0x1f0>)
 8001080:	f004 ffa0 	bl	8005fc4 <HAL_TIM_PWM_Start>
	//motor stuffs
	HAL_UART_Receive_IT (&huart2, Rx_data, 4);
 8001084:	2204      	movs	r2, #4
 8001086:	4965      	ldr	r1, [pc, #404]	@ (800121c <main+0x1f4>)
 8001088:	4865      	ldr	r0, [pc, #404]	@ (8001220 <main+0x1f8>)
 800108a:	f005 ff44 	bl	8006f16 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2108      	movs	r1, #8
 8001092:	4864      	ldr	r0, [pc, #400]	@ (8001224 <main+0x1fc>)
 8001094:	f003 fc3a 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109e:	4862      	ldr	r0, [pc, #392]	@ (8001228 <main+0x200>)
 80010a0:	f003 fc34 	bl	800490c <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
	//htim3.Instance->CCR1=50;
	//PID stuffs
	offset1=2.0/360;
 80010a4:	4961      	ldr	r1, [pc, #388]	@ (800122c <main+0x204>)
 80010a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80011d8 <main+0x1b0>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint1=180;
 80010b0:	495f      	ldr	r1, [pc, #380]	@ (8001230 <main+0x208>)
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001234 <main+0x20c>)
 80010b8:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint2=180;
 80010bc:	495e      	ldr	r1, [pc, #376]	@ (8001238 <main+0x210>)
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001234 <main+0x20c>)
 80010c4:	e9c1 2300 	strd	r2, r3, [r1]
	//PID(&motor_1_PID,&rev,&PIDOut,&angle_setpoint, 2, 8, 0, _PID_P_ON_E, _PID_CD_DIRECT); //kinda fast rev
	PID(&motor_1_PID,&rev1,&PIDOut1,&angle_setpoint1, 5.7000, 57.0000, 0.1425, _PID_P_ON_E, _PID_CD_DIRECT); // first angular
 80010c8:	2300      	movs	r3, #0
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	ed9f 2b43 	vldr	d2, [pc, #268]	@ 80011e0 <main+0x1b8>
 80010d4:	ed9f 1b44 	vldr	d1, [pc, #272]	@ 80011e8 <main+0x1c0>
 80010d8:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 80011f0 <main+0x1c8>
 80010dc:	4b54      	ldr	r3, [pc, #336]	@ (8001230 <main+0x208>)
 80010de:	4a57      	ldr	r2, [pc, #348]	@ (800123c <main+0x214>)
 80010e0:	4957      	ldr	r1, [pc, #348]	@ (8001240 <main+0x218>)
 80010e2:	4858      	ldr	r0, [pc, #352]	@ (8001244 <main+0x21c>)
 80010e4:	f000 fc00 	bl	80018e8 <PID>
	PID_SetMode(&motor_1_PID, _PID_MODE_AUTOMATIC);
 80010e8:	2101      	movs	r1, #1
 80010ea:	4856      	ldr	r0, [pc, #344]	@ (8001244 <main+0x21c>)
 80010ec:	f000 fd32 	bl	8001b54 <PID_SetMode>
	PID_SetSampleTime(&motor_1_PID,4);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4854      	ldr	r0, [pc, #336]	@ (8001244 <main+0x21c>)
 80010f4:	f000 fea2 	bl	8001e3c <PID_SetSampleTime>
	PID_SetOutputLimits(&motor_1_PID, -100, 100);
 80010f8:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 80011f8 <main+0x1d0>
 80010fc:	ed9f 0b40 	vldr	d0, [pc, #256]	@ 8001200 <main+0x1d8>
 8001100:	4850      	ldr	r0, [pc, #320]	@ (8001244 <main+0x21c>)
 8001102:	f000 fd45 	bl	8001b90 <PID_SetOutputLimits>
	PID(&motor_2_PID,&rev2,&PIDOut2,&angle_setpoint2, 5.7000, 57.0000, 0.1425, _PID_P_ON_E, _PID_CD_DIRECT); // first angular
 8001106:	2300      	movs	r3, #0
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2301      	movs	r3, #1
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	ed9f 2b34 	vldr	d2, [pc, #208]	@ 80011e0 <main+0x1b8>
 8001112:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 80011e8 <main+0x1c0>
 8001116:	ed9f 0b36 	vldr	d0, [pc, #216]	@ 80011f0 <main+0x1c8>
 800111a:	4b47      	ldr	r3, [pc, #284]	@ (8001238 <main+0x210>)
 800111c:	4a4a      	ldr	r2, [pc, #296]	@ (8001248 <main+0x220>)
 800111e:	494b      	ldr	r1, [pc, #300]	@ (800124c <main+0x224>)
 8001120:	484b      	ldr	r0, [pc, #300]	@ (8001250 <main+0x228>)
 8001122:	f000 fbe1 	bl	80018e8 <PID>
	PID_SetMode(&motor_2_PID, _PID_MODE_AUTOMATIC);
 8001126:	2101      	movs	r1, #1
 8001128:	4849      	ldr	r0, [pc, #292]	@ (8001250 <main+0x228>)
 800112a:	f000 fd13 	bl	8001b54 <PID_SetMode>
	PID_SetSampleTime(&motor_2_PID,4);
 800112e:	2104      	movs	r1, #4
 8001130:	4847      	ldr	r0, [pc, #284]	@ (8001250 <main+0x228>)
 8001132:	f000 fe83 	bl	8001e3c <PID_SetSampleTime>
	PID_SetOutputLimits(&motor_2_PID, -100, 100);
 8001136:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 80011f8 <main+0x1d0>
 800113a:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8001200 <main+0x1d8>
 800113e:	4844      	ldr	r0, [pc, #272]	@ (8001250 <main+0x228>)
 8001140:	f000 fd26 	bl	8001b90 <PID_SetOutputLimits>
	Moving_Average_Init(&mot1_filterStruct);
 8001144:	4843      	ldr	r0, [pc, #268]	@ (8001254 <main+0x22c>)
 8001146:	f000 fb73 	bl	8001830 <Moving_Average_Init>
	Moving_Average_Init(&mot2_filterStruct);
 800114a:	4843      	ldr	r0, [pc, #268]	@ (8001258 <main+0x230>)
 800114c:	f000 fb70 	bl	8001830 <Moving_Average_Init>
	//set initial angle
	//cw(100);
	//HAL_Delay(500);
	//stop();
	HAL_UART_Transmit(&huart2, str, sizeof(str), 1000);
 8001150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001154:	2298      	movs	r2, #152	@ 0x98
 8001156:	4941      	ldr	r1, [pc, #260]	@ (800125c <main+0x234>)
 8001158:	4831      	ldr	r0, [pc, #196]	@ (8001220 <main+0x1f8>)
 800115a:	f005 fe4a 	bl	8006df2 <HAL_UART_Transmit>
	//sprintf_min((char*)str,"test\n");//,angle2,revol2);
	HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
 800115e:	23ff      	movs	r3, #255	@ 0xff
 8001160:	2298      	movs	r2, #152	@ 0x98
 8001162:	493e      	ldr	r1, [pc, #248]	@ (800125c <main+0x234>)
 8001164:	482e      	ldr	r0, [pc, #184]	@ (8001220 <main+0x1f8>)
 8001166:	f005 fe44 	bl	8006df2 <HAL_UART_Transmit>
	tle5012_Rset();
 800116a:	f002 ff15 	bl	8003f98 <tle5012_Rset>
	tle5012_Rset();
 800116e:	f002 ff13 	bl	8003f98 <tle5012_Rset>
	tle5012_Rset();
 8001172:	f002 ff11 	bl	8003f98 <tle5012_Rset>
	tle5012_Rset();
 8001176:	f002 ff0f 	bl	8003f98 <tle5012_Rset>
	read_sensors();
 800117a:	f000 faa5 	bl	80016c8 <read_sensors>
	read_sensors();
 800117e:	f000 faa3 	bl	80016c8 <read_sensors>
	read_sensors();
 8001182:	f000 faa1 	bl	80016c8 <read_sensors>
	read_sensors();
 8001186:	f000 fa9f 	bl	80016c8 <read_sensors>
	read_sensors();
 800118a:	f000 fa9d 	bl	80016c8 <read_sensors>
	read_sensors();
 800118e:	f000 fa9b 	bl	80016c8 <read_sensors>
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
	reset_motors();
 8001192:	f000 f90f 	bl	80013b4 <reset_motors>
	tle5012_Rset();
 8001196:	f002 feff 	bl	8003f98 <tle5012_Rset>
	HAL_Delay(3000);
 800119a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800119e:	f003 f84d 	bl	800423c <HAL_Delay>
	angle_setpoint1=init_angle_1;
 80011a2:	4923      	ldr	r1, [pc, #140]	@ (8001230 <main+0x208>)
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <main+0x238>)
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint2=init_angle_2;
 80011ae:	4922      	ldr	r1, [pc, #136]	@ (8001238 <main+0x210>)
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <main+0x23c>)
 80011b6:	e9c1 2300 	strd	r2, r3, [r1]
	//goto_angle1(0.25);
	//goto_angle2(0.25);
	reset_motors();
 80011ba:	f000 f8fb 	bl	80013b4 <reset_motors>
	  		}*/

	  		//sprintf_min((char*)string,"rx: %d%d%d%d%d%d \r\n",Rx_data[0],Rx_data[1],Rx_data[2],Rx_data[3],Rx_data[4],Rx_data[5]);
	  		//HAL_UART_Transmit(&huart2,string,sizeof(string),0xff);
	  		//sprintf_min((char*)string,"1: %.2f,%d,%.2f  2: %.2f,%d \r\n",angle_,revol,PIDOut,angle2,revol2);
	  read_sensors();
 80011be:	f000 fa83 	bl	80016c8 <read_sensors>
	  goto_angle1(0.5);
 80011c2:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8001208 <main+0x1e0>
 80011c6:	f000 f911 	bl	80013ec <goto_angle1>
	  print_debug();
 80011ca:	f000 f9ef 	bl	80015ac <print_debug>
  {
 80011ce:	bf00      	nop
 80011d0:	e7f5      	b.n	80011be <main+0x196>
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	16c16c17 	.word	0x16c16c17
 80011dc:	3f76c16c 	.word	0x3f76c16c
 80011e0:	a3d70a3d 	.word	0xa3d70a3d
 80011e4:	3fc23d70 	.word	0x3fc23d70
 80011e8:	00000000 	.word	0x00000000
 80011ec:	404c8000 	.word	0x404c8000
 80011f0:	cccccccd 	.word	0xcccccccd
 80011f4:	4016cccc 	.word	0x4016cccc
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40590000 	.word	0x40590000
 8001200:	00000000 	.word	0x00000000
 8001204:	c0590000 	.word	0xc0590000
 8001208:	00000000 	.word	0x00000000
 800120c:	3fe00000 	.word	0x3fe00000
 8001210:	200002d0 	.word	0x200002d0
 8001214:	20000318 	.word	0x20000318
 8001218:	20000360 	.word	0x20000360
 800121c:	20000200 	.word	0x20000200
 8001220:	200003a8 	.word	0x200003a8
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	200001e8 	.word	0x200001e8
 8001230:	200001e0 	.word	0x200001e0
 8001234:	40668000 	.word	0x40668000
 8001238:	200001f8 	.word	0x200001f8
 800123c:	200001d8 	.word	0x200001d8
 8001240:	200000e8 	.word	0x200000e8
 8001244:	200000f8 	.word	0x200000f8
 8001248:	200001f0 	.word	0x200001f0
 800124c:	200000f0 	.word	0x200000f0
 8001250:	20000168 	.word	0x20000168
 8001254:	2000020c 	.word	0x2000020c
 8001258:	2000023c 	.word	0x2000023c
 800125c:	20000000 	.word	0x20000000
 8001260:	406f4000 	.word	0x406f4000
 8001264:	40518000 	.word	0x40518000

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2230      	movs	r2, #48	@ 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fdec 	bl	8007e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <SystemClock_Config+0xc8>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	4a26      	ldr	r2, [pc, #152]	@ (8001330 <SystemClock_Config+0xc8>)
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	@ 0x40
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <SystemClock_Config+0xc8>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <SystemClock_Config+0xcc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <SystemClock_Config+0xcc>)
 80012b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <SystemClock_Config+0xcc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012c8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	2302      	movs	r3, #2
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012d8:	2304      	movs	r3, #4
 80012da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012dc:	2364      	movs	r3, #100	@ 0x64
 80012de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fb27 	bl	8004940 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012f8:	f000 fa86 	bl	8001808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2103      	movs	r1, #3
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fd89 	bl	8004e30 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001324:	f000 fa70 	bl	8001808 <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	@ 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <ccw1>:
	//htim4.Instance->CCR1=0;
	//htim4.Instance->CCR2=speed;
}

void ccw1(int speed)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	speed=i_abs(speed);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f002 fed1 	bl	80040e8 <i_abs>
 8001346:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	htim4.Instance->CCR1=0;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <ccw1+0x28>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=speed;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <ccw1+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000360 	.word	0x20000360

08001364 <cw1>:
	//htim4.Instance->CCR2=0;

}

void cw1(int speed)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	speed=i_abs(speed);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f002 febb 	bl	80040e8 <i_abs>
 8001372:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	htim4.Instance->CCR1=speed;
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <cw1+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=0;
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <cw1+0x28>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000360 	.word	0x20000360

08001390 <stop1>:
	htim3.Instance->CCR2=100;
	//htim4.Instance->CCR1=0;
}

void stop1()
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
	htim4.Instance->CCR1=100;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <stop1+0x20>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2264      	movs	r2, #100	@ 0x64
 800139a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=100;
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <stop1+0x20>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2264      	movs	r2, #100	@ 0x64
 80013a2:	639a      	str	r2, [r3, #56]	@ 0x38
	//htim4.Instance->CCR1=0;
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000360 	.word	0x20000360

080013b4 <reset_motors>:
void reset_motors()
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=0;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <reset_motors+0x30>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=0;
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <reset_motors+0x30>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR1=0;
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <reset_motors+0x34>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=0;
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <reset_motors+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000318 	.word	0x20000318
 80013e8:	20000360 	.word	0x20000360

080013ec <goto_angle1>:

void goto_angle1(double error)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	ed87 0b00 	vstr	d0, [r7]
	read_sensors();
 80013f6:	f000 f967 	bl	80016c8 <read_sensors>
	abs_val=r_abs(rev1-angle_setpoint1);
 80013fa:	4b57      	ldr	r3, [pc, #348]	@ (8001558 <goto_angle1+0x16c>)
 80013fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001400:	4b56      	ldr	r3, [pc, #344]	@ (800155c <goto_angle1+0x170>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7fe feeb 	bl	80001e0 <__aeabi_dsub>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb7f 	bl	8000b14 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	ee00 3a10 	vmov	s0, r3
 800141c:	f000 f8aa 	bl	8001574 <r_abs>
 8001420:	ee10 3a10 	vmov	r3, s0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f83b 	bl	80004a0 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	494c      	ldr	r1, [pc, #304]	@ (8001560 <goto_angle1+0x174>)
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
	while (abs_val>error)
 8001434:	e07e      	b.n	8001534 <goto_angle1+0x148>
	{
		read_sensors();
 8001436:	f000 f947 	bl	80016c8 <read_sensors>
		abs_val=r_abs(rev1-angle_setpoint1);
 800143a:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <goto_angle1+0x16c>)
 800143c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001440:	4b46      	ldr	r3, [pc, #280]	@ (800155c <goto_angle1+0x170>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7fe fecb 	bl	80001e0 <__aeabi_dsub>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fb5f 	bl	8000b14 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	ee00 3a10 	vmov	s0, r3
 800145c:	f000 f88a 	bl	8001574 <r_abs>
 8001460:	ee10 3a10 	vmov	r3, s0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f81b 	bl	80004a0 <__aeabi_f2d>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	493c      	ldr	r1, [pc, #240]	@ (8001560 <goto_angle1+0x174>)
 8001470:	e9c1 2300 	strd	r2, r3, [r1]
		PID_Compute(&motor_1_PID);
 8001474:	483b      	ldr	r0, [pc, #236]	@ (8001564 <goto_angle1+0x178>)
 8001476:	f000 fa83 	bl	8001980 <PID_Compute>
		if (PIDOut1>100.0)
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <goto_angle1+0x17c>)
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b39      	ldr	r3, [pc, #228]	@ (800156c <goto_angle1+0x180>)
 8001486:	f7ff faf3 	bl	8000a70 <__aeabi_dcmpgt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <goto_angle1+0xb0>
		{
		PIDOut1=100.0;
 8001490:	4935      	ldr	r1, [pc, #212]	@ (8001568 <goto_angle1+0x17c>)
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4b35      	ldr	r3, [pc, #212]	@ (800156c <goto_angle1+0x180>)
 8001498:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (PIDOut1<-100.0)
 800149c:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <goto_angle1+0x17c>)
 800149e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <goto_angle1+0x184>)
 80014a8:	f7ff fac4 	bl	8000a34 <__aeabi_dcmplt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <goto_angle1+0xd2>
		{
		PIDOut1=-100.0;
 80014b2:	492d      	ldr	r1, [pc, #180]	@ (8001568 <goto_angle1+0x17c>)
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <goto_angle1+0x184>)
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (PIDOut1<0)
 80014be:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <goto_angle1+0x17c>)
 80014c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	f7ff fab2 	bl	8000a34 <__aeabi_dcmplt>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <goto_angle1+0x100>
		{
		ccw1((int)PIDOut1);
 80014d6:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <goto_angle1+0x17c>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fad0 	bl	8000a84 <__aeabi_d2iz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff26 	bl	8001338 <ccw1>
		}
		if (PIDOut1>0) {
 80014ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <goto_angle1+0x17c>)
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f7ff fab9 	bl	8000a70 <__aeabi_dcmpgt>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <goto_angle1+0x12e>
		cw1((int)PIDOut1);
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <goto_angle1+0x17c>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fab9 	bl	8000a84 <__aeabi_d2iz>
 8001512:	4603      	mov	r3, r0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff25 	bl	8001364 <cw1>
		}
		if (abs_val<=error)
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <goto_angle1+0x174>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001524:	f7ff fa9a 	bl	8000a5c <__aeabi_dcmpge>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d100      	bne.n	8001530 <goto_angle1+0x144>
 800152e:	e001      	b.n	8001534 <goto_angle1+0x148>
		{
			stop1();
 8001530:	f7ff ff2e 	bl	8001390 <stop1>
	while (abs_val>error)
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <goto_angle1+0x174>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f7ff fa79 	bl	8000a34 <__aeabi_dcmplt>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f af76 	bne.w	8001436 <goto_angle1+0x4a>
			  			//angle_setpoint=rev;
		}
		//sprintf_min((char*)str,"%.2f,%.3f,%.5f,%d,%.2f,%.3f,%.3f\r\n",angle_,rev,angle2,rev2,PIDOut,angle_setpoint,angle_setpoint2,r_abs(rev-angle_setpoint));
		//HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
	}
	stop1();
 800154a:	f7ff ff21 	bl	8001390 <stop1>


}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200000e8 	.word	0x200000e8
 800155c:	200001e0 	.word	0x200001e0
 8001560:	20000270 	.word	0x20000270
 8001564:	200000f8 	.word	0x200000f8
 8001568:	200001d8 	.word	0x200001d8
 800156c:	40590000 	.word	0x40590000
 8001570:	c0590000 	.word	0xc0590000

08001574 <r_abs>:


}

float r_abs(float num)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (num<0.0)
 800157e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	d505      	bpl.n	8001598 <r_abs+0x24>
		{
			num=-num;
 800158c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001590:	eef1 7a67 	vneg.f32	s15, s15
 8001594:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return num;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	ee07 3a90 	vmov	s15, r3
}
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <print_debug>:
void print_debug()
{
 80015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b0:	ed2d 8b04 	vpush	{d8-d9}
 80015b4:	b09f      	sub	sp, #124	@ 0x7c
 80015b6:	af16      	add	r7, sp, #88	@ 0x58

	sprintf_min((char*)str,"%.2f,%.2f,%.3f,%.3f,%.5f,%.5f,%d,%d,%.2f,%.2f,%.2f,%.2f,%d \r\n",angle_,angle2,rev1,rev2,rev_rp1,rev_rp2,revol1,revol2,PIDOut1,PIDOut2,angle_setpoint1,angle_setpoint2,osc_state);//r_abs(rev1-angle_setpoint1));
 80015b8:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <print_debug+0xdc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff6f 	bl	80004a0 <__aeabi_f2d>
 80015c2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80015c6:	4b31      	ldr	r3, [pc, #196]	@ (800168c <print_debug+0xe0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff68 	bl	80004a0 <__aeabi_f2d>
 80015d0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <print_debug+0xe4>)
 80015d6:	ed93 8b00 	vldr	d8, [r3]
 80015da:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <print_debug+0xe8>)
 80015dc:	ed93 9b00 	vldr	d9, [r3]
 80015e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <print_debug+0xec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff5b 	bl	80004a0 <__aeabi_f2d>
 80015ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015ee:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <print_debug+0xf0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff54 	bl	80004a0 <__aeabi_f2d>
 80015f8:	e9c7 0100 	strd	r0, r1, [r7]
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <print_debug+0xf4>)
 80015fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001602:	461e      	mov	r6, r3
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <print_debug+0xf8>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	461a      	mov	r2, r3
 800160c:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <print_debug+0xfc>)
 800160e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <print_debug+0x100>)
 8001614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <print_debug+0x104>)
 800161a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <print_debug+0x108>)
 8001620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <print_debug+0x10c>)
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	9314      	str	r3, [sp, #80]	@ 0x50
 800162c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001630:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001634:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001638:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800163c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800163e:	960a      	str	r6, [sp, #40]	@ 0x28
 8001640:	ed97 7b00 	vldr	d7, [r7]
 8001644:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001648:	ed97 7b02 	vldr	d7, [r7, #8]
 800164c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001650:	ed8d 9b04 	vstr	d9, [sp, #16]
 8001654:	ed8d 8b02 	vstr	d8, [sp, #8]
 8001658:	ed97 7b04 	vldr	d7, [r7, #16]
 800165c:	ed8d 7b00 	vstr	d7, [sp]
 8001660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001664:	4915      	ldr	r1, [pc, #84]	@ (80016bc <print_debug+0x110>)
 8001666:	4816      	ldr	r0, [pc, #88]	@ (80016c0 <print_debug+0x114>)
 8001668:	f002 f878 	bl	800375c <sprintf_>
	HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
 800166c:	23ff      	movs	r3, #255	@ 0xff
 800166e:	2298      	movs	r2, #152	@ 0x98
 8001670:	4913      	ldr	r1, [pc, #76]	@ (80016c0 <print_debug+0x114>)
 8001672:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <print_debug+0x118>)
 8001674:	f005 fbbd 	bl	8006df2 <HAL_UART_Transmit>
}
 8001678:	bf00      	nop
 800167a:	3724      	adds	r7, #36	@ 0x24
 800167c:	46bd      	mov	sp, r7
 800167e:	ecbd 8b04 	vpop	{d8-d9}
 8001682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001686:	bf00      	nop
 8001688:	200000e0 	.word	0x200000e0
 800168c:	200000e4 	.word	0x200000e4
 8001690:	200000e8 	.word	0x200000e8
 8001694:	200000f0 	.word	0x200000f0
 8001698:	200000d8 	.word	0x200000d8
 800169c:	200000dc 	.word	0x200000dc
 80016a0:	200000d4 	.word	0x200000d4
 80016a4:	200000d6 	.word	0x200000d6
 80016a8:	200001d8 	.word	0x200001d8
 80016ac:	200001f0 	.word	0x200001f0
 80016b0:	200001e0 	.word	0x200001e0
 80016b4:	200001f8 	.word	0x200001f8
 80016b8:	2000009c 	.word	0x2000009c
 80016bc:	08007ec8 	.word	0x08007ec8
 80016c0:	20000000 	.word	0x20000000
 80016c4:	200003a8 	.word	0x200003a8

080016c8 <read_sensors>:
void read_sensors()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	angle_ = tle5012_ReadAngle();//Moving_Average_Compute(,&mot1_filterStruct);
 80016cc:	f002 fb34 	bl	8003d38 <tle5012_ReadAngle>
 80016d0:	eef0 7a40 	vmov.f32	s15, s0
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <read_sensors+0xfc>)
 80016d6:	edc3 7a00 	vstr	s15, [r3]
	tle5012_ReadAngle2(&angle2);
 80016da:	483b      	ldr	r0, [pc, #236]	@ (80017c8 <read_sensors+0x100>)
 80016dc:	f002 fb70 	bl	8003dc0 <tle5012_ReadAngle2>
	//angle2=Moving_Average_Compute(angle2,&mot2_filterStruct);
	revol1 = tle5012_ReadRevol(0);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f002 fbb1 	bl	8003e48 <tle5012_ReadRevol>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b38      	ldr	r3, [pc, #224]	@ (80017cc <read_sensors+0x104>)
 80016ec:	801a      	strh	r2, [r3, #0]
	revol2 = tle5012_ReadRevol2(0);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f002 fbfe 	bl	8003ef0 <tle5012_ReadRevol2>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <read_sensors+0x108>)
 80016fa:	801a      	strh	r2, [r3, #0]
	rev1=(revol1+(angle_/360))*360;
 80016fc:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <read_sensors+0x104>)
 80016fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <read_sensors+0xfc>)
 800170c:	edd3 6a00 	vldr	s13, [r3]
 8001710:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80017d4 <read_sensors+0x10c>
 8001714:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80017d4 <read_sensors+0x10c>
 8001720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001724:	ee17 0a90 	vmov	r0, s15
 8001728:	f7fe feba 	bl	80004a0 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4929      	ldr	r1, [pc, #164]	@ (80017d8 <read_sensors+0x110>)
 8001732:	e9c1 2300 	strd	r2, r3, [r1]
	rev2=(revol2+(angle2/360))*360;
 8001736:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <read_sensors+0x108>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001744:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <read_sensors+0x100>)
 8001746:	edd3 6a00 	vldr	s13, [r3]
 800174a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80017d4 <read_sensors+0x10c>
 800174e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80017d4 <read_sensors+0x10c>
 800175a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175e:	ee17 0a90 	vmov	r0, s15
 8001762:	f7fe fe9d 	bl	80004a0 <__aeabi_f2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	491c      	ldr	r1, [pc, #112]	@ (80017dc <read_sensors+0x114>)
 800176c:	e9c1 2300 	strd	r2, r3, [r1]
	rev_rp1=(revol1+(angle_/360));
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <read_sensors+0x104>)
 8001772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <read_sensors+0xfc>)
 8001780:	edd3 6a00 	vldr	s13, [r3]
 8001784:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80017d4 <read_sensors+0x10c>
 8001788:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800178c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <read_sensors+0x118>)
 8001792:	edc3 7a00 	vstr	s15, [r3]
	rev_rp2=(revol2+(angle2/360));
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <read_sensors+0x108>)
 8001798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a4:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <read_sensors+0x100>)
 80017a6:	edd3 6a00 	vldr	s13, [r3]
 80017aa:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80017d4 <read_sensors+0x10c>
 80017ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <read_sensors+0x11c>)
 80017b8:	edc3 7a00 	vstr	s15, [r3]
	print_debug();
 80017bc:	f7ff fef6 	bl	80015ac <print_debug>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000e0 	.word	0x200000e0
 80017c8:	200000e4 	.word	0x200000e4
 80017cc:	200000d4 	.word	0x200000d4
 80017d0:	200000d6 	.word	0x200000d6
 80017d4:	43b40000 	.word	0x43b40000
 80017d8:	200000e8 	.word	0x200000e8
 80017dc:	200000f0 	.word	0x200000f0
 80017e0:	200000d8 	.word	0x200000d8
 80017e4:	200000dc 	.word	0x200000dc

080017e8 <srand>:
				}
	}

}

void srand(uint32_t s) {
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    seed = s;
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <srand+0x1c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000098 	.word	0x20000098

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(10);
 8001810:	200a      	movs	r0, #10
 8001812:	f002 fd13 	bl	800423c <HAL_Delay>
	  HAL_UART_Transmit(&huart2,str,sizeof(str),1000);
 8001816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181a:	2298      	movs	r2, #152	@ 0x98
 800181c:	4902      	ldr	r1, [pc, #8]	@ (8001828 <Error_Handler+0x20>)
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <Error_Handler+0x24>)
 8001820:	f005 fae7 	bl	8006df2 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8001824:	bf00      	nop
 8001826:	e7f3      	b.n	8001810 <Error_Handler+0x8>
 8001828:	20000000 	.word	0x20000000
 800182c:	200003a8 	.word	0x200003a8

08001830 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	filter_struct->Sum = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
	filter_struct->WindowPointer = 0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	62da      	str	r2, [r3, #44]	@ 0x2c
	
	for(uint32_t i=0; i<WindowLength; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e007      	b.n	800185c <Moving_Average_Init+0x2c>
	{
		filter_struct->History[i] = 0;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	2100      	movs	r1, #0
 8001852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<WindowLength; i++)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b09      	cmp	r3, #9
 8001860:	d9f4      	bls.n	800184c <Moving_Average_Init+0x1c>
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018a0:	f7ff f8e6 	bl	8000a70 <__aeabi_dcmpgt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80018b6:	e011      	b.n	80018dc <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018c4:	f7ff f8b6 	bl	8000a34 <__aeabi_dcmplt>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <PID_Init+0x60>
}
 80018ce:	e005      	b.n	80018dc <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0000      	movs	r0, r0
	...

080018e8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80018f0:	6239      	str	r1, [r7, #32]
 80018f2:	61fa      	str	r2, [r7, #28]
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80018fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80018fe:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	6a3a      	ldr	r2, [r7, #32]
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	2200      	movs	r2, #0
 8001918:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800191a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001970 <PID+0x88>
 800191e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001978 <PID+0x90>
 8001922:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001924:	f000 f934 	bl	8001b90 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	2264      	movs	r2, #100	@ 0x64
 800192c:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800192e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001932:	4619      	mov	r1, r3
 8001934:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001936:	f000 fa41 	bl	8001dbc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800193a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800193e:	4619      	mov	r1, r3
 8001940:	ed97 2b00 	vldr	d2, [r7]
 8001944:	ed97 1b02 	vldr	d1, [r7, #8]
 8001948:	ed97 0b04 	vldr	d0, [r7, #16]
 800194c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800194e:	f000 f98d 	bl	8001c6c <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001952:	f002 fc67 	bl	8004224 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	1ad2      	subs	r2, r2, r3
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	605a      	str	r2, [r3, #4]
	
}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w
 8001970:	00000000 	.word	0x00000000
 8001974:	406fe000 	.word	0x406fe000
	...

08001980 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b08c      	sub	sp, #48	@ 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <PID_Compute+0x14>
	{
		return _FALSE;
 8001990:	2300      	movs	r3, #0
 8001992:	e0db      	b.n	8001b4c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001994:	f002 fc46 	bl	8004224 <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f0c0 80cd 	bcc.w	8001b4a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019c8:	f7fe fc0a 	bl	80001e0 <__aeabi_dsub>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80019da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019de:	f7fe fbff 	bl	80001e0 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80019f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fa:	f7fe fda9 	bl	8000550 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f7fe fbed 	bl	80001e4 <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d114      	bne.n	8001a46 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a2c:	f7fe fd90 	bl	8000550 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fbd2 	bl	80001e0 <__aeabi_dsub>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001a52:	f7ff f80d 	bl	8000a70 <__aeabi_dcmpgt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001a68:	e010      	b.n	8001a8c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001a76:	f7fe ffdd 	bl	8000a34 <__aeabi_dcmplt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a9e:	f7fe fd57 	bl	8000550 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001aaa:	e005      	b.n	8001ab8 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ac8:	f7fe fd42 	bl	8000550 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fb84 	bl	80001e0 <__aeabi_dsub>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ae0:	f7fe fb80 	bl	80001e4 <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		
		if (output > uPID->OutMax)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001af6:	f7fe ffbb 	bl	8000a70 <__aeabi_dcmpgt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001b06:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001b0a:	e00e      	b.n	8001b2a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001b12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b16:	f7fe ff8d 	bl	8000a34 <__aeabi_dcmplt>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001b26:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b32:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b44:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8001b4a:	2300      	movs	r3, #0
	}
	
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3730      	adds	r7, #48	@ 0x30
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}

08001b54 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <PID_SetMode+0x2e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fe77 	bl	8001870 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	705a      	strb	r2, [r3, #1]
	
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6178      	str	r0, [r7, #20]
 8001b98:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b9c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ba8:	f7fe ff58 	bl	8000a5c <__aeabi_dcmpge>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d158      	bne.n	8001c64 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001bb2:	6979      	ldr	r1, [r7, #20]
 8001bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001bbc:	6979      	ldr	r1, [r7, #20]
 8001bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bc2:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d04b      	beq.n	8001c66 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001bdc:	f7fe ff48 	bl	8000a70 <__aeabi_dcmpgt>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001bf0:	e9c1 2300 	strd	r2, r3, [r1]
 8001bf4:	e012      	b.n	8001c1c <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c04:	f7fe ff16 	bl	8000a34 <__aeabi_dcmplt>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c18:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c28:	f7fe ff22 	bl	8000a70 <__aeabi_dcmpgt>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c38:	6979      	ldr	r1, [r7, #20]
 8001c3a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c3e:	e012      	b.n	8001c66 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c4c:	f7fe fef2 	bl	8000a34 <__aeabi_dcmplt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c5c:	6979      	ldr	r1, [r7, #20]
 8001c5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c62:	e000      	b.n	8001c66 <PID_SetOutputLimits+0xd6>
		return;
 8001c64:	bf00      	nop
		}
		else { }
		
	}
	
}
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	61f8      	str	r0, [r7, #28]
 8001c74:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c78:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c7c:	ed87 2b00 	vstr	d2, [r7]
 8001c80:	460b      	mov	r3, r1
 8001c82:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c90:	f7fe fed0 	bl	8000a34 <__aeabi_dcmplt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8089 	bne.w	8001dae <PID_SetTunings2+0x142>
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ca8:	f7fe fec4 	bl	8000a34 <__aeabi_dcmplt>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d17d      	bne.n	8001dae <PID_SetTunings2+0x142>
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cbe:	f7fe feb9 	bl	8000a34 <__aeabi_dcmplt>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d172      	bne.n	8001dae <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	7efa      	ldrb	r2, [r7, #27]
 8001ccc:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001cce:	7efb      	ldrb	r3, [r7, #27]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001ce0:	69f9      	ldr	r1, [r7, #28]
 8001ce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ce6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001cea:	69f9      	ldr	r1, [r7, #28]
 8001cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cf0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cfa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fbaa 	bl	800045c <__aeabi_ui2d>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <PID_SetTunings2+0x14c>)
 8001d0e:	f7fe fd49 	bl	80007a4 <__aeabi_ddiv>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8001d1a:	69f9      	ldr	r1, [r7, #28]
 8001d1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d20:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001d24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d2c:	f7fe fc10 	bl	8000550 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	69f9      	ldr	r1, [r7, #28]
 8001d36:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d42:	f7fe fd2f 	bl	80007a4 <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	69f9      	ldr	r1, [r7, #28]
 8001d4c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	78db      	ldrb	r3, [r3, #3]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d12b      	bne.n	8001db0 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	f7fe fa3b 	bl	80001e0 <__aeabi_dsub>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	69f9      	ldr	r1, [r7, #28]
 8001d70:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001d7a:	f04f 0000 	mov.w	r0, #0
 8001d7e:	f04f 0100 	mov.w	r1, #0
 8001d82:	f7fe fa2d 	bl	80001e0 <__aeabi_dsub>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	69f9      	ldr	r1, [r7, #28]
 8001d8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001d96:	f04f 0000 	mov.w	r0, #0
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	f7fe fa1f 	bl	80001e0 <__aeabi_dsub>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	69f9      	ldr	r1, [r7, #28]
 8001da8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001dac:	e000      	b.n	8001db0 <PID_SetTunings2+0x144>
		return;
 8001dae:	bf00      	nop
		
	}
	
}
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	408f4000 	.word	0x408f4000

08001dbc <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02e      	beq.n	8001e2e <PID_SetControllerDirection+0x72>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	78db      	ldrb	r3, [r3, #3]
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d029      	beq.n	8001e2e <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	f7fe f9fa 	bl	80001e0 <__aeabi_dsub>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	f04f 0100 	mov.w	r1, #0
 8001e04:	f7fe f9ec 	bl	80001e0 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	f7fe f9de 	bl	80001e0 <__aeabi_dsub>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	70da      	strb	r2, [r3, #3]
	
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	dd2e      	ble.n	8001eaa <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f7fe fb15 	bl	800047c <__aeabi_i2d>
 8001e52:	4604      	mov	r4, r0
 8001e54:	460d      	mov	r5, r1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fafe 	bl	800045c <__aeabi_ui2d>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fc9c 	bl	80007a4 <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e7e:	f7fe fb67 	bl	8000550 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e96:	f7fe fc85 	bl	80007a4 <__aeabi_ddiv>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}

08001eb2 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d204      	bcs.n	8001ed4 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	701a      	strb	r2, [r3, #0]
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e002      	b.n	8001f12 <_strnlen_s+0x16>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <_strnlen_s+0x28>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	603a      	str	r2, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f3      	bne.n	8001f0c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	1ad3      	subs	r3, r2, r3
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f44:	d904      	bls.n	8001f50 <_is_digit+0x1a>
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b39      	cmp	r3, #57	@ 0x39
 8001f4a:	d801      	bhi.n	8001f50 <_is_digit+0x1a>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <_is_digit+0x1c>
 8001f50:	2300      	movs	r3, #0
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001f70:	e00e      	b.n	8001f90 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	1c59      	adds	r1, r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6011      	str	r1, [r2, #0]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4403      	add	r3, r0
 8001f8c:	3b30      	subs	r3, #48	@ 0x30
 8001f8e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ffcd 	bl	8001f36 <_is_digit>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1e7      	bne.n	8001f72 <_atoi+0xe>
  }
  return i;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d125      	bne.n	8002014 <_out_rev+0x68>
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d120      	bne.n	8002014 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e00a      	b.n	8001fee <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	1c53      	adds	r3, r2, #1
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	68fc      	ldr	r4, [r7, #12]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	2020      	movs	r0, #32
 8001fe6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3f0      	bcc.n	8001fd8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001ff6:	e00d      	b.n	8002014 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002002:	4413      	add	r3, r2
 8002004:	7818      	ldrb	r0, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	1c53      	adds	r3, r2, #1
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	68fc      	ldr	r4, [r7, #12]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	47a0      	blx	r4
  while (len) {
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ee      	bne.n	8001ff8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800201a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002024:	e007      	b.n	8002036 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	1c53      	adds	r3, r2, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	68fc      	ldr	r4, [r7, #12]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	2020      	movs	r0, #32
 8002034:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800203e:	429a      	cmp	r2, r3
 8002040:	d8f1      	bhi.n	8002026 <_out_rev+0x7a>
    }
  }

  return idx;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}

0800204c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af04      	add	r7, sp, #16
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d136      	bne.n	80020d2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d018      	beq.n	800209c <_ntoa_format+0x50>
 800206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <_ntoa_format+0x50>
 8002074:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d104      	bne.n	8002086 <_ntoa_format+0x3a>
 800207c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <_ntoa_format+0x50>
      width--;
 8002086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002088:	3b01      	subs	r3, #1
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800208c:	e006      	b.n	800209c <_ntoa_format+0x50>
      buf[len++] = '0';
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	61fa      	str	r2, [r7, #28]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4413      	add	r3, r2
 8002098:	2230      	movs	r2, #48	@ 0x30
 800209a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d20a      	bcs.n	80020ba <_ntoa_format+0x6e>
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b1f      	cmp	r3, #31
 80020a8:	d9f1      	bls.n	800208e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80020aa:	e006      	b.n	80020ba <_ntoa_format+0x6e>
      buf[len++] = '0';
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	61fa      	str	r2, [r7, #28]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4413      	add	r3, r2
 80020b6:	2230      	movs	r2, #48	@ 0x30
 80020b8:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <_ntoa_format+0x86>
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d202      	bcs.n	80020d2 <_ntoa_format+0x86>
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b1f      	cmp	r3, #31
 80020d0:	d9ec      	bls.n	80020ac <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80020d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d058      	beq.n	800218e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80020dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <_ntoa_format+0xc8>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <_ntoa_format+0xc8>
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d003      	beq.n	80020fc <_ntoa_format+0xb0>
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10b      	bne.n	8002114 <_ntoa_format+0xc8>
      len--;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3b01      	subs	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <_ntoa_format+0xc8>
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	2b10      	cmp	r3, #16
 800210c:	d102      	bne.n	8002114 <_ntoa_format+0xc8>
        len--;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b01      	subs	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	2b10      	cmp	r3, #16
 8002118:	d10f      	bne.n	800213a <_ntoa_format+0xee>
 800211a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10a      	bne.n	800213a <_ntoa_format+0xee>
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b1f      	cmp	r3, #31
 8002128:	d807      	bhi.n	800213a <_ntoa_format+0xee>
      buf[len++] = 'x';
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	61fa      	str	r2, [r7, #28]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4413      	add	r3, r2
 8002134:	2278      	movs	r2, #120	@ 0x78
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e01f      	b.n	800217a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	2b10      	cmp	r3, #16
 800213e:	d10f      	bne.n	8002160 <_ntoa_format+0x114>
 8002140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <_ntoa_format+0x114>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b1f      	cmp	r3, #31
 800214e:	d807      	bhi.n	8002160 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	61fa      	str	r2, [r7, #28]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	2258      	movs	r2, #88	@ 0x58
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e00c      	b.n	800217a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	2b02      	cmp	r3, #2
 8002164:	d109      	bne.n	800217a <_ntoa_format+0x12e>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	2b1f      	cmp	r3, #31
 800216a:	d806      	bhi.n	800217a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	61fa      	str	r2, [r7, #28]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4413      	add	r3, r2
 8002176:	2262      	movs	r2, #98	@ 0x62
 8002178:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b1f      	cmp	r3, #31
 800217e:	d806      	bhi.n	800218e <_ntoa_format+0x142>
      buf[len++] = '0';
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	61fa      	str	r2, [r7, #28]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4413      	add	r3, r2
 800218a:	2230      	movs	r2, #48	@ 0x30
 800218c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	2b1f      	cmp	r3, #31
 8002192:	d824      	bhi.n	80021de <_ntoa_format+0x192>
    if (negative) {
 8002194:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <_ntoa_format+0x160>
      buf[len++] = '-';
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	61fa      	str	r2, [r7, #28]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4413      	add	r3, r2
 80021a6:	222d      	movs	r2, #45	@ 0x2d
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e018      	b.n	80021de <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80021ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	61fa      	str	r2, [r7, #28]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4413      	add	r3, r2
 80021c0:	222b      	movs	r2, #43	@ 0x2b
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e00b      	b.n	80021de <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80021c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <_ntoa_format+0x192>
      buf[len++] = ' ';
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	61fa      	str	r2, [r7, #28]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4413      	add	r3, r2
 80021da:	2220      	movs	r2, #32
 80021dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	9303      	str	r3, [sp, #12]
 80021e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff fed9 	bl	8001fac <_out_rev>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b096      	sub	sp, #88	@ 0x58
 8002208:	af08      	add	r7, sp, #32
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800221c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221e:	f023 0310 	bic.w	r3, r3, #16
 8002222:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <_ntoa_long+0x30>
 800222e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d032      	beq.n	800229a <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002238:	fbb3 f2f2 	udiv	r2, r3, r2
 800223c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800223e:	fb01 f202 	mul.w	r2, r1, r2
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002248:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800224c:	2b09      	cmp	r3, #9
 800224e:	d804      	bhi.n	800225a <_ntoa_long+0x56>
 8002250:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002254:	3330      	adds	r3, #48	@ 0x30
 8002256:	b2da      	uxtb	r2, r3
 8002258:	e00d      	b.n	8002276 <_ntoa_long+0x72>
 800225a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <_ntoa_long+0x64>
 8002264:	2241      	movs	r2, #65	@ 0x41
 8002266:	e000      	b.n	800226a <_ntoa_long+0x66>
 8002268:	2261      	movs	r2, #97	@ 0x61
 800226a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800226e:	4413      	add	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3b0a      	subs	r3, #10
 8002274:	b2da      	uxtb	r2, r3
 8002276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002278:	1c59      	adds	r1, r3, #1
 800227a:	6379      	str	r1, [r7, #52]	@ 0x34
 800227c:	3338      	adds	r3, #56	@ 0x38
 800227e:	443b      	add	r3, r7
 8002280:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002284:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800228e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <_ntoa_long+0x96>
 8002294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002296:	2b1f      	cmp	r3, #31
 8002298:	d9cc      	bls.n	8002234 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800229a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229c:	9306      	str	r3, [sp, #24]
 800229e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022a0:	9305      	str	r3, [sp, #20]
 80022a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022a4:	9304      	str	r3, [sp, #16]
 80022a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022a8:	9303      	str	r3, [sp, #12]
 80022aa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fec3 	bl	800204c <_ntoa_format>
 80022c6:	4603      	mov	r3, r0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3738      	adds	r7, #56	@ 0x38
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b096      	sub	sp, #88	@ 0x58
 80022d4:	af08      	add	r7, sp, #32
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80022e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022e6:	4313      	orrs	r3, r2
 80022e8:	d103      	bne.n	80022f2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80022ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ec:	f023 0310 	bic.w	r3, r3, #16
 80022f0:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80022f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <_ntoa_long_long+0x34>
 80022fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002300:	4313      	orrs	r3, r2
 8002302:	d037      	beq.n	8002374 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002304:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800230c:	f7fe fc52 	bl	8000bb4 <__aeabi_uldivmod>
 8002310:	4613      	mov	r3, r2
 8002312:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002316:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800231a:	2b09      	cmp	r3, #9
 800231c:	d804      	bhi.n	8002328 <_ntoa_long_long+0x58>
 800231e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002322:	3330      	adds	r3, #48	@ 0x30
 8002324:	b2da      	uxtb	r2, r3
 8002326:	e00d      	b.n	8002344 <_ntoa_long_long+0x74>
 8002328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <_ntoa_long_long+0x66>
 8002332:	2241      	movs	r2, #65	@ 0x41
 8002334:	e000      	b.n	8002338 <_ntoa_long_long+0x68>
 8002336:	2261      	movs	r2, #97	@ 0x61
 8002338:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800233c:	4413      	add	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3b0a      	subs	r3, #10
 8002342:	b2da      	uxtb	r2, r3
 8002344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	6379      	str	r1, [r7, #52]	@ 0x34
 800234a:	3338      	adds	r3, #56	@ 0x38
 800234c:	443b      	add	r3, r7
 800234e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002352:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002356:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800235a:	f7fe fc2b 	bl	8000bb4 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800236a:	4313      	orrs	r3, r2
 800236c:	d002      	beq.n	8002374 <_ntoa_long_long+0xa4>
 800236e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002370:	2b1f      	cmp	r3, #31
 8002372:	d9c7      	bls.n	8002304 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002376:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002378:	9206      	str	r2, [sp, #24]
 800237a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800237c:	9205      	str	r2, [sp, #20]
 800237e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002380:	9204      	str	r2, [sp, #16]
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002388:	9302      	str	r3, [sp, #8]
 800238a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fe56 	bl	800204c <_ntoa_format>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3738      	adds	r7, #56	@ 0x38
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	0000      	movs	r0, r0
 80023ac:	0000      	movs	r0, r0
	...

080023b0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b09d      	sub	sp, #116	@ 0x74
 80023b4:	af04      	add	r7, sp, #16
 80023b6:	6178      	str	r0, [r7, #20]
 80023b8:	6139      	str	r1, [r7, #16]
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80023d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023da:	f7fe fb21 	bl	8000a20 <__aeabi_dcmpeq>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10f      	bne.n	8002404 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80023e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e6:	9303      	str	r3, [sp, #12]
 80023e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ea:	9302      	str	r3, [sp, #8]
 80023ec:	2303      	movs	r3, #3
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	4ba7      	ldr	r3, [pc, #668]	@ (8002690 <_ftoa+0x2e0>)
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	6939      	ldr	r1, [r7, #16]
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f7ff fdd6 	bl	8001fac <_out_rev>
 8002400:	4603      	mov	r3, r0
 8002402:	e222      	b.n	800284a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 800240c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002410:	f7fe fb10 	bl	8000a34 <__aeabi_dcmplt>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00f      	beq.n	800243a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800241a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	2304      	movs	r3, #4
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	4b9b      	ldr	r3, [pc, #620]	@ (8002694 <_ftoa+0x2e4>)
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6939      	ldr	r1, [r7, #16]
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f7ff fdbb 	bl	8001fac <_out_rev>
 8002436:	4603      	mov	r3, r0
 8002438:	e207      	b.n	800284a <_ftoa+0x49a>
  if (value > DBL_MAX)
 800243a:	f04f 32ff 	mov.w	r2, #4294967295
 800243e:	4b96      	ldr	r3, [pc, #600]	@ (8002698 <_ftoa+0x2e8>)
 8002440:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002444:	f7fe fb14 	bl	8000a70 <__aeabi_dcmpgt>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01d      	beq.n	800248a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800244e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <_ftoa+0xac>
 8002458:	4b90      	ldr	r3, [pc, #576]	@ (800269c <_ftoa+0x2ec>)
 800245a:	e000      	b.n	800245e <_ftoa+0xae>
 800245c:	4b90      	ldr	r3, [pc, #576]	@ (80026a0 <_ftoa+0x2f0>)
 800245e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002460:	f002 0204 	and.w	r2, r2, #4
 8002464:	2a00      	cmp	r2, #0
 8002466:	d001      	beq.n	800246c <_ftoa+0xbc>
 8002468:	2204      	movs	r2, #4
 800246a:	e000      	b.n	800246e <_ftoa+0xbe>
 800246c:	2203      	movs	r2, #3
 800246e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002470:	9103      	str	r1, [sp, #12]
 8002472:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002474:	9102      	str	r1, [sp, #8]
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f7ff fd93 	bl	8001fac <_out_rev>
 8002486:	4603      	mov	r3, r0
 8002488:	e1df      	b.n	800284a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800248a:	a37d      	add	r3, pc, #500	@ (adr r3, 8002680 <_ftoa+0x2d0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002494:	f7fe faec 	bl	8000a70 <__aeabi_dcmpgt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <_ftoa+0x102>
 800249e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002688 <_ftoa+0x2d8>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a8:	f7fe fac4 	bl	8000a34 <__aeabi_dcmplt>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00f      	beq.n	80024d2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80024b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	ed97 0b00 	vldr	d0, [r7]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f000 f9c9 	bl	8002860 <_etoa>
 80024ce:	4603      	mov	r3, r0
 80024d0:	e1bb      	b.n	800284a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024e4:	f7fe faa6 	bl	8000a34 <__aeabi_dcmplt>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00e      	beq.n	800250c <_ftoa+0x15c>
    negative = true;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 80024f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	f7fd fe6e 	bl	80001e0 <__aeabi_dsub>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800250c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800250e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002516:	2306      	movs	r3, #6
 8002518:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800251a:	e00a      	b.n	8002532 <_ftoa+0x182>
    buf[len++] = '0';
 800251c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002522:	3360      	adds	r3, #96	@ 0x60
 8002524:	443b      	add	r3, r7
 8002526:	2230      	movs	r2, #48	@ 0x30
 8002528:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800252c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800252e:	3b01      	subs	r3, #1
 8002530:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002534:	2b1f      	cmp	r3, #31
 8002536:	d802      	bhi.n	800253e <_ftoa+0x18e>
 8002538:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800253a:	2b09      	cmp	r3, #9
 800253c:	d8ee      	bhi.n	800251c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800253e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002542:	f7fe fa9f 	bl	8000a84 <__aeabi_d2iz>
 8002546:	4603      	mov	r3, r0
 8002548:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 800254a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800254c:	f7fd ff96 	bl	800047c <__aeabi_i2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002558:	f7fd fe42 	bl	80001e0 <__aeabi_dsub>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	4a4f      	ldr	r2, [pc, #316]	@ (80026a4 <_ftoa+0x2f4>)
 8002566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fd ffee 	bl	8000550 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 800257c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002580:	f7fe faa8 	bl	8000ad4 <__aeabi_d2uiz>
 8002584:	4603      	mov	r3, r0
 8002586:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8002588:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800258a:	f7fd ff67 	bl	800045c <__aeabi_ui2d>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002596:	f7fd fe23 	bl	80001e0 <__aeabi_dsub>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b40      	ldr	r3, [pc, #256]	@ (80026a8 <_ftoa+0x2f8>)
 80025a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025ac:	f7fe fa60 	bl	8000a70 <__aeabi_dcmpgt>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <_ftoa+0x234>
    ++frac;
 80025b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025b8:	3301      	adds	r3, #1
 80025ba:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80025bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80025be:	f7fd ff4d 	bl	800045c <__aeabi_ui2d>
 80025c2:	4a38      	ldr	r2, [pc, #224]	@ (80026a4 <_ftoa+0x2f4>)
 80025c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fe fa45 	bl	8000a5c <__aeabi_dcmpge>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01a      	beq.n	800260e <_ftoa+0x25e>
      frac = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 80025dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025de:	3301      	adds	r3, #1
 80025e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80025e2:	e014      	b.n	800260e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4b2f      	ldr	r3, [pc, #188]	@ (80026a8 <_ftoa+0x2f8>)
 80025ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025ee:	f7fe fa21 	bl	8000a34 <__aeabi_dcmplt>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80025f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <_ftoa+0x258>
 80025fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800260a:	3301      	adds	r3, #1
 800260c:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 800260e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002610:	2b00      	cmp	r3, #0
 8002612:	d14b      	bne.n	80026ac <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002614:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002616:	f7fd ff31 	bl	800047c <__aeabi_i2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002622:	f7fd fddd 	bl	80001e0 <__aeabi_dsub>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800262e:	2301      	movs	r3, #1
 8002630:	461c      	mov	r4, r3
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <_ftoa+0x2f8>)
 8002638:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800263c:	f7fe f9fa 	bl	8000a34 <__aeabi_dcmplt>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <_ftoa+0x29a>
 8002646:	2300      	movs	r3, #0
 8002648:	461c      	mov	r4, r3
 800264a:	b2e3      	uxtb	r3, r4
 800264c:	f083 0301 	eor.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <_ftoa+0x2ba>
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <_ftoa+0x2f8>)
 800265c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002660:	f7fe fa06 	bl	8000a70 <__aeabi_dcmpgt>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d064      	beq.n	8002734 <_ftoa+0x384>
 800266a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8081 	beq.w	8002778 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002678:	3301      	adds	r3, #1
 800267a:	657b      	str	r3, [r7, #84]	@ 0x54
 800267c:	e07c      	b.n	8002778 <_ftoa+0x3c8>
 800267e:	bf00      	nop
 8002680:	00000000 	.word	0x00000000
 8002684:	41cdcd65 	.word	0x41cdcd65
 8002688:	00000000 	.word	0x00000000
 800268c:	c1cdcd65 	.word	0xc1cdcd65
 8002690:	08007f08 	.word	0x08007f08
 8002694:	08007f0c 	.word	0x08007f0c
 8002698:	7fefffff 	.word	0x7fefffff
 800269c:	08007f14 	.word	0x08007f14
 80026a0:	08007f1c 	.word	0x08007f1c
 80026a4:	08007f20 	.word	0x08007f20
 80026a8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80026ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026b0:	e01f      	b.n	80026f2 <_ftoa+0x342>
      --count;
 80026b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026b4:	3b01      	subs	r3, #1
 80026b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80026b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80026ba:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <_ftoa+0x4a4>)
 80026bc:	fba3 2301 	umull	r2, r3, r3, r1
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	1aca      	subs	r2, r1, r3
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026d0:	1c59      	adds	r1, r3, #1
 80026d2:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80026d4:	3230      	adds	r2, #48	@ 0x30
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	3360      	adds	r3, #96	@ 0x60
 80026da:	443b      	add	r3, r7
 80026dc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80026e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002854 <_ftoa+0x4a4>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	08db      	lsrs	r3, r3, #3
 80026ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f4:	2b1f      	cmp	r3, #31
 80026f6:	d9dc      	bls.n	80026b2 <_ftoa+0x302>
 80026f8:	e009      	b.n	800270e <_ftoa+0x35e>
        break;
 80026fa:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80026fc:	e007      	b.n	800270e <_ftoa+0x35e>
      buf[len++] = '0';
 80026fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002704:	3360      	adds	r3, #96	@ 0x60
 8002706:	443b      	add	r3, r7
 8002708:	2230      	movs	r2, #48	@ 0x30
 800270a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800270e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002710:	2b1f      	cmp	r3, #31
 8002712:	d804      	bhi.n	800271e <_ftoa+0x36e>
 8002714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002716:	1e5a      	subs	r2, r3, #1
 8002718:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ef      	bne.n	80026fe <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800271e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002720:	2b1f      	cmp	r3, #31
 8002722:	d829      	bhi.n	8002778 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800272a:	3360      	adds	r3, #96	@ 0x60
 800272c:	443b      	add	r3, r7
 800272e:	222e      	movs	r2, #46	@ 0x2e
 8002730:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002734:	e020      	b.n	8002778 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002736:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002738:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <_ftoa+0x4a8>)
 800273a:	fb83 1302 	smull	r1, r3, r3, r2
 800273e:	1099      	asrs	r1, r3, #2
 8002740:	17d3      	asrs	r3, r2, #31
 8002742:	1ac9      	subs	r1, r1, r3
 8002744:	460b      	mov	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	1ad1      	subs	r1, r2, r3
 800274e:	b2ca      	uxtb	r2, r1
 8002750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002752:	1c59      	adds	r1, r3, #1
 8002754:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002756:	3230      	adds	r2, #48	@ 0x30
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	3360      	adds	r3, #96	@ 0x60
 800275c:	443b      	add	r3, r7
 800275e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002764:	4a3c      	ldr	r2, [pc, #240]	@ (8002858 <_ftoa+0x4a8>)
 8002766:	fb82 1203 	smull	r1, r2, r2, r3
 800276a:	1092      	asrs	r2, r2, #2
 800276c:	17db      	asrs	r3, r3, #31
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	657b      	str	r3, [r7, #84]	@ 0x54
 8002772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277a:	2b1f      	cmp	r3, #31
 800277c:	d9db      	bls.n	8002736 <_ftoa+0x386>
 800277e:	e000      	b.n	8002782 <_ftoa+0x3d2>
      break;
 8002780:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d123      	bne.n	80027d4 <_ftoa+0x424>
 800278c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01e      	beq.n	80027d4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002798:	2b00      	cmp	r3, #0
 800279a:	d014      	beq.n	80027c6 <_ftoa+0x416>
 800279c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d104      	bne.n	80027ae <_ftoa+0x3fe>
 80027a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <_ftoa+0x416>
      width--;
 80027ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b0:	3b01      	subs	r3, #1
 80027b2:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80027b4:	e007      	b.n	80027c6 <_ftoa+0x416>
      buf[len++] = '0';
 80027b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027bc:	3360      	adds	r3, #96	@ 0x60
 80027be:	443b      	add	r3, r7
 80027c0:	2230      	movs	r2, #48	@ 0x30
 80027c2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80027c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80027c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d202      	bcs.n	80027d4 <_ftoa+0x424>
 80027ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d0:	2b1f      	cmp	r3, #31
 80027d2:	d9f0      	bls.n	80027b6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80027d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d6:	2b1f      	cmp	r3, #31
 80027d8:	d827      	bhi.n	800282a <_ftoa+0x47a>
    if (negative) {
 80027da:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <_ftoa+0x444>
      buf[len++] = '-';
 80027e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027e8:	3360      	adds	r3, #96	@ 0x60
 80027ea:	443b      	add	r3, r7
 80027ec:	222d      	movs	r2, #45	@ 0x2d
 80027ee:	f803 2c48 	strb.w	r2, [r3, #-72]
 80027f2:	e01a      	b.n	800282a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80027f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80027fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002804:	3360      	adds	r3, #96	@ 0x60
 8002806:	443b      	add	r3, r7
 8002808:	222b      	movs	r2, #43	@ 0x2b
 800280a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800280e:	e00c      	b.n	800282a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <_ftoa+0x47a>
      buf[len++] = ' ';
 800281a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002820:	3360      	adds	r3, #96	@ 0x60
 8002822:	443b      	add	r3, r7
 8002824:	2220      	movs	r2, #32
 8002826:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800282a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800282c:	9303      	str	r3, [sp, #12]
 800282e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002830:	9302      	str	r3, [sp, #8]
 8002832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	f107 0318 	add.w	r3, r7, #24
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6939      	ldr	r1, [r7, #16]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f7ff fbb2 	bl	8001fac <_out_rev>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3764      	adds	r7, #100	@ 0x64
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	cccccccd 	.word	0xcccccccd
 8002858:	66666667 	.word	0x66666667
 800285c:	00000000 	.word	0x00000000

08002860 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002864:	b09f      	sub	sp, #124	@ 0x7c
 8002866:	af06      	add	r7, sp, #24
 8002868:	6278      	str	r0, [r7, #36]	@ 0x24
 800286a:	6239      	str	r1, [r7, #32]
 800286c:	61fa      	str	r2, [r7, #28]
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800287c:	f7fe f8d0 	bl	8000a20 <__aeabi_dcmpeq>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d014      	beq.n	80028b0 <_etoa+0x50>
 8002886:	f04f 32ff 	mov.w	r2, #4294967295
 800288a:	4bc1      	ldr	r3, [pc, #772]	@ (8002b90 <_etoa+0x330>)
 800288c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002890:	f7fe f8ee 	bl	8000a70 <__aeabi_dcmpgt>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <_etoa+0x50>
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 80028a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028a6:	f7fe f8c5 	bl	8000a34 <__aeabi_dcmplt>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80028b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028b4:	9302      	str	r3, [sp, #8]
 80028b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	ed97 0b04 	vldr	d0, [r7, #16]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	6a39      	ldr	r1, [r7, #32]
 80028cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028ce:	f7ff fd6f 	bl	80023b0 <_ftoa>
 80028d2:	4603      	mov	r3, r0
 80028d4:	e23f      	b.n	8002d56 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80028d6:	2301      	movs	r3, #1
 80028d8:	461e      	mov	r6, r3
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028e6:	f7fe f8a5 	bl	8000a34 <__aeabi_dcmplt>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <_etoa+0x94>
 80028f0:	2300      	movs	r3, #0
 80028f2:	461e      	mov	r6, r3
 80028f4:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 80028f8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <_etoa+0xb4>
    value = -value;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	ed97 7b00 	vldr	d7, [r7]
 8002910:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002914:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002920:	2306      	movs	r3, #6
 8002922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002926:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800292a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800292e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	0d0a      	lsrs	r2, r1, #20
 800293c:	2300      	movs	r3, #0
 800293e:	4613      	mov	r3, r2
 8002940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002944:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8002948:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800294a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800294e:	4690      	mov	r8, r2
 8002950:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002954:	4644      	mov	r4, r8
 8002956:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 800295a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800295e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002962:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002964:	f7fd fd8a 	bl	800047c <__aeabi_i2d>
 8002968:	a37d      	add	r3, pc, #500	@ (adr r3, 8002b60 <_etoa+0x300>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f7fd fdef 	bl	8000550 <__aeabi_dmul>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	a37b      	add	r3, pc, #492	@ (adr r3, 8002b68 <_etoa+0x308>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fc30 	bl	80001e4 <__adddf3>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4614      	mov	r4, r2
 800298a:	461d      	mov	r5, r3
 800298c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	4b7f      	ldr	r3, [pc, #508]	@ (8002b94 <_etoa+0x334>)
 8002996:	f7fd fc23 	bl	80001e0 <__aeabi_dsub>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	a373      	add	r3, pc, #460	@ (adr r3, 8002b70 <_etoa+0x310>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fdd2 	bl	8000550 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4620      	mov	r0, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	f7fd fc16 	bl	80001e4 <__adddf3>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f860 	bl	8000a84 <__aeabi_d2iz>
 80029c4:	4603      	mov	r3, r0
 80029c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80029c8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80029ca:	f7fd fd57 	bl	800047c <__aeabi_i2d>
 80029ce:	a36a      	add	r3, pc, #424	@ (adr r3, 8002b78 <_etoa+0x318>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f7fd fdbc 	bl	8000550 <__aeabi_dmul>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b98 <_etoa+0x338>)
 80029e6:	f7fd fbfd 	bl	80001e4 <__adddf3>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f847 	bl	8000a84 <__aeabi_d2iz>
 80029f6:	4603      	mov	r3, r0
 80029f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80029fa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80029fc:	f7fd fd3e 	bl	800047c <__aeabi_i2d>
 8002a00:	a35f      	add	r3, pc, #380	@ (adr r3, 8002b80 <_etoa+0x320>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fda3 	bl	8000550 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4614      	mov	r4, r2
 8002a10:	461d      	mov	r5, r3
 8002a12:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002a14:	f7fd fd32 	bl	800047c <__aeabi_i2d>
 8002a18:	a35b      	add	r3, pc, #364	@ (adr r3, 8002b88 <_etoa+0x328>)
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f7fd fd97 	bl	8000550 <__aeabi_dmul>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7fd fbd9 	bl	80001e0 <__aeabi_dsub>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 8002a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002a3e:	f7fd fd87 	bl	8000550 <__aeabi_dmul>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a4c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002a50:	17da      	asrs	r2, r3, #31
 8002a52:	469a      	mov	sl, r3
 8002a54:	4693      	mov	fp, r2
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002a62:	2200      	movs	r2, #0
 8002a64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002a68:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002a6c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	f7fd fbb6 	bl	80001e4 <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4690      	mov	r8, r2
 8002a7e:	4699      	mov	r9, r3
 8002a80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a8c:	f7fd fba8 	bl	80001e0 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4692      	mov	sl, r2
 8002a96:	469b      	mov	fp, r3
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b9c <_etoa+0x33c>)
 8002a9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002aa2:	f7fd fe7f 	bl	80007a4 <__aeabi_ddiv>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <_etoa+0x340>)
 8002ab4:	f7fd fb96 	bl	80001e4 <__adddf3>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ac0:	f7fd fe70 	bl	80007a4 <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <_etoa+0x344>)
 8002ad2:	f7fd fb87 	bl	80001e4 <__adddf3>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ade:	f7fd fe61 	bl	80007a4 <__aeabi_ddiv>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4650      	mov	r0, sl
 8002ae8:	4659      	mov	r1, fp
 8002aea:	f7fd fb7b 	bl	80001e4 <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4640      	mov	r0, r8
 8002af4:	4649      	mov	r1, r9
 8002af6:	f7fd fe55 	bl	80007a4 <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <_etoa+0x348>)
 8002b08:	f7fd fb6c 	bl	80001e4 <__adddf3>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f7fd fd1c 	bl	8000550 <__aeabi_dmul>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b28:	f7fd ff84 	bl	8000a34 <__aeabi_dcmplt>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <_etoa+0x2ee>
    expval--;
 8002b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b34:	3b01      	subs	r3, #1
 8002b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 8002b38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <_etoa+0x340>)
 8002b42:	f7fd fe2f 	bl	80007a4 <__aeabi_ddiv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b50:	2b63      	cmp	r3, #99	@ 0x63
 8002b52:	dc2b      	bgt.n	8002bac <_etoa+0x34c>
 8002b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b56:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002b5a:	db27      	blt.n	8002bac <_etoa+0x34c>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e026      	b.n	8002bae <_etoa+0x34e>
 8002b60:	509f79fb 	.word	0x509f79fb
 8002b64:	3fd34413 	.word	0x3fd34413
 8002b68:	8b60c8b3 	.word	0x8b60c8b3
 8002b6c:	3fc68a28 	.word	0x3fc68a28
 8002b70:	636f4361 	.word	0x636f4361
 8002b74:	3fd287a7 	.word	0x3fd287a7
 8002b78:	0979a371 	.word	0x0979a371
 8002b7c:	400a934f 	.word	0x400a934f
 8002b80:	bbb55516 	.word	0xbbb55516
 8002b84:	40026bb1 	.word	0x40026bb1
 8002b88:	fefa39ef 	.word	0xfefa39ef
 8002b8c:	3fe62e42 	.word	0x3fe62e42
 8002b90:	7fefffff 	.word	0x7fefffff
 8002b94:	3ff80000 	.word	0x3ff80000
 8002b98:	3fe00000 	.word	0x3fe00000
 8002b9c:	402c0000 	.word	0x402c0000
 8002ba0:	40240000 	.word	0x40240000
 8002ba4:	40180000 	.word	0x40180000
 8002ba8:	3ff00000 	.word	0x3ff00000
 8002bac:	2305      	movs	r3, #5
 8002bae:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d03d      	beq.n	8002c38 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002bbc:	a368      	add	r3, pc, #416	@ (adr r3, 8002d60 <_etoa+0x500>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bc6:	f7fd ff49 	bl	8000a5c <__aeabi_dcmpge>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d024      	beq.n	8002c1a <_etoa+0x3ba>
 8002bd0:	a365      	add	r3, pc, #404	@ (adr r3, 8002d68 <_etoa+0x508>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bda:	f7fd ff2b 	bl	8000a34 <__aeabi_dcmplt>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01a      	beq.n	8002c1a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002be8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002bea:	429a      	cmp	r2, r3
 8002bec:	da07      	bge.n	8002bfe <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002bee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bfc:	e002      	b.n	8002c04 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c18:	e00e      	b.n	8002c38 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <_etoa+0x3d8>
 8002c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <_etoa+0x3d8>
        --prec;
 8002c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c32:	3b01      	subs	r3, #1
 8002c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 8002c3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d904      	bls.n	8002c52 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002c48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c50:	e001      	b.n	8002c56 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <_etoa+0x40c>
 8002c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 8002c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <_etoa+0x426>
    value /= conv.F;
 8002c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c7a:	f7fd fd93 	bl	80007a4 <__aeabi_ddiv>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002c8a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <_etoa+0x440>
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e003      	b.n	8002ca8 <_etoa+0x448>
 8002ca0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ca4:	ed87 7b02 	vstr	d7, [r7, #8]
 8002ca8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	ed97 0b02 	vldr	d0, [r7, #8]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	6a39      	ldr	r1, [r7, #32]
 8002cc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002cc8:	f7ff fb72 	bl	80023b0 <_ftoa>
 8002ccc:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002cce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d03f      	beq.n	8002d54 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <_etoa+0x484>
 8002ce0:	2045      	movs	r0, #69	@ 0x45
 8002ce2:	e000      	b.n	8002ce6 <_etoa+0x486>
 8002ce4:	2065      	movs	r0, #101	@ 0x65
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	1c53      	adds	r3, r2, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6a39      	ldr	r1, [r7, #32]
 8002cf2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bfb8      	it	lt
 8002cfa:	425b      	neglt	r3, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d00:	0fdb      	lsrs	r3, r3, #31
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d06:	3a01      	subs	r2, #1
 8002d08:	2105      	movs	r1, #5
 8002d0a:	9105      	str	r1, [sp, #20]
 8002d0c:	9204      	str	r2, [sp, #16]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	9203      	str	r2, [sp, #12]
 8002d12:	220a      	movs	r2, #10
 8002d14:	9202      	str	r2, [sp, #8]
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	9000      	str	r0, [sp, #0]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	6a39      	ldr	r1, [r7, #32]
 8002d20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d22:	f7ff fa6f 	bl	8002204 <_ntoa_long>
 8002d26:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00f      	beq.n	8002d54 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002d34:	e007      	b.n	8002d46 <_etoa+0x4e6>
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	1c53      	adds	r3, r2, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6a39      	ldr	r1, [r7, #32]
 8002d42:	2020      	movs	r0, #32
 8002d44:	47a0      	blx	r4
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f0      	bhi.n	8002d36 <_etoa+0x4d6>
    }
  }
  return idx;
 8002d54:	69fb      	ldr	r3, [r7, #28]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3764      	adds	r7, #100	@ 0x64
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d60:	eb1c432d 	.word	0xeb1c432d
 8002d64:	3f1a36e2 	.word	0x3f1a36e2
 8002d68:	00000000 	.word	0x00000000
 8002d6c:	412e8480 	.word	0x412e8480

08002d70 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d74:	b0a3      	sub	sp, #140	@ 0x8c
 8002d76:	af0a      	add	r7, sp, #40	@ 0x28
 8002d78:	6178      	str	r0, [r7, #20]
 8002d7a:	6139      	str	r1, [r7, #16]
 8002d7c:	60fa      	str	r2, [r7, #12]
 8002d7e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 84cf 	bne.w	800372a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002d8c:	4ba8      	ldr	r3, [pc, #672]	@ (8003030 <_vsnprintf+0x2c0>)
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002d90:	f000 bccb 	b.w	800372a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b25      	cmp	r3, #37	@ 0x25
 8002d9a:	d00d      	beq.n	8002db8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	7818      	ldrb	r0, [r3, #0]
 8002da0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da2:	1c53      	adds	r3, r2, #1
 8002da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da6:	697c      	ldr	r4, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6939      	ldr	r1, [r7, #16]
 8002dac:	47a0      	blx	r4
      format++;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3301      	adds	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
      continue;
 8002db4:	f000 bcb9 	b.w	800372a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	3b20      	subs	r3, #32
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d857      	bhi.n	8002e7c <_vsnprintf+0x10c>
 8002dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <_vsnprintf+0x64>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002e55 	.word	0x08002e55
 8002dd8:	08002e7d 	.word	0x08002e7d
 8002ddc:	08002e7d 	.word	0x08002e7d
 8002de0:	08002e69 	.word	0x08002e69
 8002de4:	08002e7d 	.word	0x08002e7d
 8002de8:	08002e7d 	.word	0x08002e7d
 8002dec:	08002e7d 	.word	0x08002e7d
 8002df0:	08002e7d 	.word	0x08002e7d
 8002df4:	08002e7d 	.word	0x08002e7d
 8002df8:	08002e7d 	.word	0x08002e7d
 8002dfc:	08002e7d 	.word	0x08002e7d
 8002e00:	08002e41 	.word	0x08002e41
 8002e04:	08002e7d 	.word	0x08002e7d
 8002e08:	08002e2d 	.word	0x08002e2d
 8002e0c:	08002e7d 	.word	0x08002e7d
 8002e10:	08002e7d 	.word	0x08002e7d
 8002e14:	08002e19 	.word	0x08002e19
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002e18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	3301      	adds	r3, #1
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	2301      	movs	r3, #1
 8002e28:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e2a:	e02a      	b.n	8002e82 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002e2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e3e:	e020      	b.n	8002e82 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	2301      	movs	r3, #1
 8002e50:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e52:	e016      	b.n	8002e82 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002e54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	2301      	movs	r3, #1
 8002e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e66:	e00c      	b.n	8002e82 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002e68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e6a:	f043 0310 	orr.w	r3, r3, #16
 8002e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	2301      	movs	r3, #1
 8002e78:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e7a:	e002      	b.n	8002e82 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e80:	bf00      	nop
      }
    } while (n);
 8002e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d19c      	bne.n	8002dc2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f850 	bl	8001f36 <_is_digit>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f85f 	bl	8001f64 <_atoi>
 8002ea6:	65b8      	str	r0, [r7, #88]	@ 0x58
 8002ea8:	e01a      	b.n	8002ee0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eb0:	d116      	bne.n	8002ee0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8002eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002eb6:	1d1a      	adds	r2, r3, #4
 8002eb8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	da07      	bge.n	8002ed6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 8002ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed0:	425b      	negs	r3, r3
 8002ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ed4:	e001      	b.n	8002eda <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3301      	adds	r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002eea:	d127      	bne.n	8002f3c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8002eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f819 	bl	8001f36 <_is_digit>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff f828 	bl	8001f64 <_atoi>
 8002f14:	6578      	str	r0, [r7, #84]	@ 0x54
 8002f16:	e011      	b.n	8002f3c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f1e:	d10d      	bne.n	8002f3c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f24:	1d1a      	adds	r2, r3, #4
 8002f26:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002f34:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	3b68      	subs	r3, #104	@ 0x68
 8002f42:	2b12      	cmp	r3, #18
 8002f44:	d866      	bhi.n	8003014 <_vsnprintf+0x2a4>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <_vsnprintf+0x1dc>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002fbf 	.word	0x08002fbf
 8002f50:	08003015 	.word	0x08003015
 8002f54:	08002ff5 	.word	0x08002ff5
 8002f58:	08003015 	.word	0x08003015
 8002f5c:	08002f99 	.word	0x08002f99
 8002f60:	08003015 	.word	0x08003015
 8002f64:	08003015 	.word	0x08003015
 8002f68:	08003015 	.word	0x08003015
 8002f6c:	08003015 	.word	0x08003015
 8002f70:	08003015 	.word	0x08003015
 8002f74:	08003015 	.word	0x08003015
 8002f78:	08003015 	.word	0x08003015
 8002f7c:	08002fe5 	.word	0x08002fe5
 8002f80:	08003015 	.word	0x08003015
 8002f84:	08003015 	.word	0x08003015
 8002f88:	08003015 	.word	0x08003015
 8002f8c:	08003015 	.word	0x08003015
 8002f90:	08003015 	.word	0x08003015
 8002f94:	08003005 	.word	0x08003005
      case 'l' :
        flags |= FLAGS_LONG;
 8002f98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b6c      	cmp	r3, #108	@ 0x6c
 8002fac:	d134      	bne.n	8003018 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002fbc:	e02c      	b.n	8003018 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b68      	cmp	r3, #104	@ 0x68
 8002fd2:	d123      	bne.n	800301c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002fe2:	e01b      	b.n	800301c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
        break;
 8002ff2:	e014      	b.n	800301e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
        break;
 8003002:	e00c      	b.n	800301e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3301      	adds	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
        break;
 8003012:	e004      	b.n	800301e <_vsnprintf+0x2ae>
      default :
        break;
 8003014:	bf00      	nop
 8003016:	e002      	b.n	800301e <_vsnprintf+0x2ae>
        break;
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <_vsnprintf+0x2ae>
        break;
 800301c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b67      	cmp	r3, #103	@ 0x67
 8003024:	f300 80b8 	bgt.w	8003198 <_vsnprintf+0x428>
 8003028:	2b25      	cmp	r3, #37	@ 0x25
 800302a:	da27      	bge.n	800307c <_vsnprintf+0x30c>
 800302c:	e370      	b.n	8003710 <_vsnprintf+0x9a0>
 800302e:	bf00      	nop
 8003030:	08001ee1 	.word	0x08001ee1
 8003034:	3b69      	subs	r3, #105	@ 0x69
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	f249 0241 	movw	r2, #36929	@ 0x9041
 8003040:	401a      	ands	r2, r3
 8003042:	2a00      	cmp	r2, #0
 8003044:	bf14      	ite	ne
 8003046:	2201      	movne	r2, #1
 8003048:	2200      	moveq	r2, #0
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	2a00      	cmp	r2, #0
 800304e:	f040 80aa 	bne.w	80031a6 <_vsnprintf+0x436>
 8003052:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8003056:	2a00      	cmp	r2, #0
 8003058:	bf14      	ite	ne
 800305a:	2201      	movne	r2, #1
 800305c:	2200      	moveq	r2, #0
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	2a00      	cmp	r2, #0
 8003062:	f040 82fb 	bne.w	800365c <_vsnprintf+0x8ec>
 8003066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 828d 	bne.w	8003594 <_vsnprintf+0x824>
 800307a:	e349      	b.n	8003710 <_vsnprintf+0x9a0>
 800307c:	3b25      	subs	r3, #37	@ 0x25
 800307e:	2b42      	cmp	r3, #66	@ 0x42
 8003080:	f200 8346 	bhi.w	8003710 <_vsnprintf+0x9a0>
 8003084:	a201      	add	r2, pc, #4	@ (adr r2, 800308c <_vsnprintf+0x31c>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080036f9 	.word	0x080036f9
 8003090:	08003711 	.word	0x08003711
 8003094:	08003711 	.word	0x08003711
 8003098:	08003711 	.word	0x08003711
 800309c:	08003711 	.word	0x08003711
 80030a0:	08003711 	.word	0x08003711
 80030a4:	08003711 	.word	0x08003711
 80030a8:	08003711 	.word	0x08003711
 80030ac:	08003711 	.word	0x08003711
 80030b0:	08003711 	.word	0x08003711
 80030b4:	08003711 	.word	0x08003711
 80030b8:	08003711 	.word	0x08003711
 80030bc:	08003711 	.word	0x08003711
 80030c0:	08003711 	.word	0x08003711
 80030c4:	08003711 	.word	0x08003711
 80030c8:	08003711 	.word	0x08003711
 80030cc:	08003711 	.word	0x08003711
 80030d0:	08003711 	.word	0x08003711
 80030d4:	08003711 	.word	0x08003711
 80030d8:	08003711 	.word	0x08003711
 80030dc:	08003711 	.word	0x08003711
 80030e0:	08003711 	.word	0x08003711
 80030e4:	08003711 	.word	0x08003711
 80030e8:	08003711 	.word	0x08003711
 80030ec:	08003711 	.word	0x08003711
 80030f0:	08003711 	.word	0x08003711
 80030f4:	08003711 	.word	0x08003711
 80030f8:	08003711 	.word	0x08003711
 80030fc:	08003711 	.word	0x08003711
 8003100:	08003711 	.word	0x08003711
 8003104:	08003711 	.word	0x08003711
 8003108:	08003711 	.word	0x08003711
 800310c:	080034ad 	.word	0x080034ad
 8003110:	0800345d 	.word	0x0800345d
 8003114:	080034ad 	.word	0x080034ad
 8003118:	08003711 	.word	0x08003711
 800311c:	08003711 	.word	0x08003711
 8003120:	08003711 	.word	0x08003711
 8003124:	08003711 	.word	0x08003711
 8003128:	08003711 	.word	0x08003711
 800312c:	08003711 	.word	0x08003711
 8003130:	08003711 	.word	0x08003711
 8003134:	08003711 	.word	0x08003711
 8003138:	08003711 	.word	0x08003711
 800313c:	08003711 	.word	0x08003711
 8003140:	08003711 	.word	0x08003711
 8003144:	08003711 	.word	0x08003711
 8003148:	08003711 	.word	0x08003711
 800314c:	08003711 	.word	0x08003711
 8003150:	08003711 	.word	0x08003711
 8003154:	08003711 	.word	0x08003711
 8003158:	080031a7 	.word	0x080031a7
 800315c:	08003711 	.word	0x08003711
 8003160:	08003711 	.word	0x08003711
 8003164:	08003711 	.word	0x08003711
 8003168:	08003711 	.word	0x08003711
 800316c:	08003711 	.word	0x08003711
 8003170:	08003711 	.word	0x08003711
 8003174:	08003711 	.word	0x08003711
 8003178:	08003711 	.word	0x08003711
 800317c:	08003711 	.word	0x08003711
 8003180:	080031a7 	.word	0x080031a7
 8003184:	0800351d 	.word	0x0800351d
 8003188:	080031a7 	.word	0x080031a7
 800318c:	080034ad 	.word	0x080034ad
 8003190:	0800345d 	.word	0x0800345d
 8003194:	080034ad 	.word	0x080034ad
 8003198:	2b78      	cmp	r3, #120	@ 0x78
 800319a:	f300 82b9 	bgt.w	8003710 <_vsnprintf+0x9a0>
 800319e:	2b69      	cmp	r3, #105	@ 0x69
 80031a0:	f6bf af48 	bge.w	8003034 <_vsnprintf+0x2c4>
 80031a4:	e2b4      	b.n	8003710 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b78      	cmp	r3, #120	@ 0x78
 80031ac:	d003      	beq.n	80031b6 <_vsnprintf+0x446>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b58      	cmp	r3, #88	@ 0x58
 80031b4:	d102      	bne.n	80031bc <_vsnprintf+0x44c>
          base = 16U;
 80031b6:	2310      	movs	r3, #16
 80031b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031ba:	e013      	b.n	80031e4 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b6f      	cmp	r3, #111	@ 0x6f
 80031c2:	d102      	bne.n	80031ca <_vsnprintf+0x45a>
          base =  8U;
 80031c4:	2308      	movs	r3, #8
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c8:	e00c      	b.n	80031e4 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b62      	cmp	r3, #98	@ 0x62
 80031d0:	d102      	bne.n	80031d8 <_vsnprintf+0x468>
          base =  2U;
 80031d2:	2302      	movs	r3, #2
 80031d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d6:	e005      	b.n	80031e4 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80031d8:	230a      	movs	r3, #10
 80031da:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80031dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031de:	f023 0310 	bic.w	r3, r3, #16
 80031e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b58      	cmp	r3, #88	@ 0x58
 80031ea:	d103      	bne.n	80031f4 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80031ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ee:	f043 0320 	orr.w	r3, r3, #32
 80031f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b69      	cmp	r3, #105	@ 0x69
 80031fa:	d007      	beq.n	800320c <_vsnprintf+0x49c>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b64      	cmp	r3, #100	@ 0x64
 8003202:	d003      	beq.n	800320c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003206:	f023 030c 	bic.w	r3, r3, #12
 800320a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800320c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800320e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8003216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b69      	cmp	r3, #105	@ 0x69
 8003224:	d004      	beq.n	8003230 <_vsnprintf+0x4c0>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	f040 8098 	bne.w	8003360 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003236:	2b00      	cmp	r3, #0
 8003238:	d031      	beq.n	800329e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800323a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800323e:	3307      	adds	r3, #7
 8003240:	f023 0307 	bic.w	r3, r3, #7
 8003244:	f103 0208 	add.w	r2, r3, #8
 8003248:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	da06      	bge.n	800326a <_vsnprintf+0x4fa>
 800325c:	2100      	movs	r1, #0
 800325e:	f1d2 0800 	rsbs	r8, r2, #0
 8003262:	eb61 0903 	sbc.w	r9, r1, r3
 8003266:	4642      	mov	r2, r8
 8003268:	464b      	mov	r3, r9
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	0fc9      	lsrs	r1, r1, #31
 800326e:	b2c9      	uxtb	r1, r1
 8003270:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003272:	2400      	movs	r4, #0
 8003274:	4682      	mov	sl, r0
 8003276:	46a3      	mov	fp, r4
 8003278:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800327a:	9008      	str	r0, [sp, #32]
 800327c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800327e:	9007      	str	r0, [sp, #28]
 8003280:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003282:	9006      	str	r0, [sp, #24]
 8003284:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003288:	9102      	str	r1, [sp, #8]
 800328a:	e9cd 2300 	strd	r2, r3, [sp]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003292:	6939      	ldr	r1, [r7, #16]
 8003294:	6978      	ldr	r0, [r7, #20]
 8003296:	f7ff f81b 	bl	80022d0 <_ntoa_long_long>
 800329a:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800329c:	e0da      	b.n	8003454 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800329e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80032a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ac:	1d1a      	adds	r2, r3, #4
 80032ae:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bfb8      	it	lt
 80032bc:	425b      	neglt	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	0fdb      	lsrs	r3, r3, #31
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80032c8:	9205      	str	r2, [sp, #20]
 80032ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032cc:	9204      	str	r2, [sp, #16]
 80032ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032d0:	9203      	str	r2, [sp, #12]
 80032d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032d4:	9202      	str	r2, [sp, #8]
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	9100      	str	r1, [sp, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	6978      	ldr	r0, [r7, #20]
 80032e2:	f7fe ff8f 	bl	8002204 <_ntoa_long>
 80032e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80032e8:	e0b4      	b.n	8003454 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80032ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <_vsnprintf+0x594>
 80032f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032f8:	1d1a      	adds	r2, r3, #4
 80032fa:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <_vsnprintf+0x5ba>
 8003304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <_vsnprintf+0x5ae>
 800330e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003312:	1d1a      	adds	r2, r3, #4
 8003314:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b21b      	sxth	r3, r3
 800331c:	e005      	b.n	800332a <_vsnprintf+0x5ba>
 800331e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003322:	1d1a      	adds	r2, r3, #4
 8003324:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	bfb8      	it	lt
 8003332:	425b      	neglt	r3, r3
 8003334:	4619      	mov	r1, r3
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	0fdb      	lsrs	r3, r3, #31
 800333a:	b2db      	uxtb	r3, r3
 800333c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800333e:	9205      	str	r2, [sp, #20]
 8003340:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003342:	9204      	str	r2, [sp, #16]
 8003344:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003346:	9203      	str	r2, [sp, #12]
 8003348:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800334a:	9202      	str	r2, [sp, #8]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	9100      	str	r1, [sp, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003354:	6939      	ldr	r1, [r7, #16]
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7fe ff54 	bl	8002204 <_ntoa_long>
 800335c:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800335e:	e079      	b.n	8003454 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003366:	2b00      	cmp	r3, #0
 8003368:	d022      	beq.n	80033b0 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800336a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800336e:	3307      	adds	r3, #7
 8003370:	f023 0307 	bic.w	r3, r3, #7
 8003374:	f103 0208 	add.w	r2, r3, #8
 8003378:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003382:	2000      	movs	r0, #0
 8003384:	460d      	mov	r5, r1
 8003386:	4606      	mov	r6, r0
 8003388:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800338a:	9108      	str	r1, [sp, #32]
 800338c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800338e:	9107      	str	r1, [sp, #28]
 8003390:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003392:	9106      	str	r1, [sp, #24]
 8003394:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003398:	2100      	movs	r1, #0
 800339a:	9102      	str	r1, [sp, #8]
 800339c:	e9cd 2300 	strd	r2, r3, [sp]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a4:	6939      	ldr	r1, [r7, #16]
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7fe ff92 	bl	80022d0 <_ntoa_long_long>
 80033ac:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80033ae:	e051      	b.n	8003454 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80033b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d018      	beq.n	80033ec <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80033ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80033c8:	9205      	str	r2, [sp, #20]
 80033ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033cc:	9204      	str	r2, [sp, #16]
 80033ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033d0:	9203      	str	r2, [sp, #12]
 80033d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033d4:	9202      	str	r2, [sp, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	9201      	str	r2, [sp, #4]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033e0:	6939      	ldr	r1, [r7, #16]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7fe ff0e 	bl	8002204 <_ntoa_long>
 80033e8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80033ea:	e033      	b.n	8003454 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80033ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <_vsnprintf+0x696>
 80033f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033fa:	1d1a      	adds	r2, r3, #4
 80033fc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e012      	b.n	800342c <_vsnprintf+0x6bc>
 8003406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <_vsnprintf+0x6b0>
 8003410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	e005      	b.n	800342c <_vsnprintf+0x6bc>
 8003420:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003424:	1d1a      	adds	r2, r3, #4
 8003426:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800342e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003430:	9305      	str	r3, [sp, #20]
 8003432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003434:	9304      	str	r3, [sp, #16]
 8003436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003438:	9303      	str	r3, [sp, #12]
 800343a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	2300      	movs	r3, #0
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800344a:	6939      	ldr	r1, [r7, #16]
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f7fe fed9 	bl	8002204 <_ntoa_long>
 8003452:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3301      	adds	r3, #1
 8003458:	60bb      	str	r3, [r7, #8]
        break;
 800345a:	e166      	b.n	800372a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b46      	cmp	r3, #70	@ 0x46
 8003462:	d103      	bne.n	800346c <_vsnprintf+0x6fc>
 8003464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003466:	f043 0320 	orr.w	r3, r3, #32
 800346a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800346c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003470:	3307      	adds	r3, #7
 8003472:	f023 0307 	bic.w	r3, r3, #7
 8003476:	f103 0208 	add.w	r2, r3, #8
 800347a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800347e:	ed93 7b00 	vldr	d7, [r3]
 8003482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	eeb0 0a47 	vmov.f32	s0, s14
 8003492:	eef0 0a67 	vmov.f32	s1, s15
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	f7fe ff87 	bl	80023b0 <_ftoa>
 80034a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
        break;
 80034aa:	e13e      	b.n	800372a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b67      	cmp	r3, #103	@ 0x67
 80034b2:	d003      	beq.n	80034bc <_vsnprintf+0x74c>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b47      	cmp	r3, #71	@ 0x47
 80034ba:	d103      	bne.n	80034c4 <_vsnprintf+0x754>
 80034bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b45      	cmp	r3, #69	@ 0x45
 80034ca:	d003      	beq.n	80034d4 <_vsnprintf+0x764>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b47      	cmp	r3, #71	@ 0x47
 80034d2:	d103      	bne.n	80034dc <_vsnprintf+0x76c>
 80034d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80034dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034e0:	3307      	adds	r3, #7
 80034e2:	f023 0307 	bic.w	r3, r3, #7
 80034e6:	f103 0208 	add.w	r2, r3, #8
 80034ea:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80034ee:	ed93 7b00 	vldr	d7, [r3]
 80034f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003502:	eef0 0a67 	vmov.f32	s1, s15
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800350a:	6939      	ldr	r1, [r7, #16]
 800350c:	6978      	ldr	r0, [r7, #20]
 800350e:	f7ff f9a7 	bl	8002860 <_etoa>
 8003512:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3301      	adds	r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
        break;
 800351a:	e106      	b.n	800372a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800351c:	2301      	movs	r3, #1
 800351e:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003520:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10e      	bne.n	8003548 <_vsnprintf+0x7d8>
          while (l++ < width) {
 800352a:	e007      	b.n	800353c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 800352c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800352e:	1c53      	adds	r3, r2, #1
 8003530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003532:	697c      	ldr	r4, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6939      	ldr	r1, [r7, #16]
 8003538:	2020      	movs	r0, #32
 800353a:	47a0      	blx	r4
          while (l++ < width) {
 800353c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	647a      	str	r2, [r7, #68]	@ 0x44
 8003542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003544:	429a      	cmp	r2, r3
 8003546:	d8f1      	bhi.n	800352c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003548:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800354c:	1d1a      	adds	r2, r3, #4
 800354e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b2d8      	uxtb	r0, r3
 8003556:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003558:	1c53      	adds	r3, r2, #1
 800355a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800355c:	697c      	ldr	r4, [r7, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6939      	ldr	r1, [r7, #16]
 8003562:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <_vsnprintf+0x81c>
          while (l++ < width) {
 800356e:	e007      	b.n	8003580 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003572:	1c53      	adds	r3, r2, #1
 8003574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003576:	697c      	ldr	r4, [r7, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6939      	ldr	r1, [r7, #16]
 800357c:	2020      	movs	r0, #32
 800357e:	47a0      	blx	r4
          while (l++ < width) {
 8003580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	647a      	str	r2, [r7, #68]	@ 0x44
 8003586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003588:	429a      	cmp	r2, r3
 800358a:	d8f1      	bhi.n	8003570 <_vsnprintf+0x800>
          }
        }
        format++;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	3301      	adds	r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
        break;
 8003592:	e0ca      	b.n	800372a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003598:	1d1a      	adds	r2, r3, #4
 800359a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80035a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <_vsnprintf+0x83c>
 80035a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035aa:	e001      	b.n	80035b0 <_vsnprintf+0x840>
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	4619      	mov	r1, r3
 80035b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80035b4:	f7fe fca2 	bl	8001efc <_strnlen_s>
 80035b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80035ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80035c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf28      	it	cs
 80035cc:	4613      	movcs	r3, r2
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80035d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11a      	bne.n	8003610 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80035da:	e007      	b.n	80035ec <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80035dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035de:	1c53      	adds	r3, r2, #1
 80035e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e2:	697c      	ldr	r4, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6939      	ldr	r1, [r7, #16]
 80035e8:	2020      	movs	r0, #32
 80035ea:	47a0      	blx	r4
          while (l++ < width) {
 80035ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d8f1      	bhi.n	80035dc <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80035f8:	e00a      	b.n	8003610 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 80035fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8003600:	7818      	ldrb	r0, [r3, #0]
 8003602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003604:	1c53      	adds	r3, r2, #1
 8003606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003608:	697c      	ldr	r4, [r7, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6939      	ldr	r1, [r7, #16]
 800360e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <_vsnprintf+0x8bc>
 8003618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800361a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0eb      	beq.n	80035fa <_vsnprintf+0x88a>
 8003622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003624:	1e5a      	subs	r2, r3, #1
 8003626:	657a      	str	r2, [r7, #84]	@ 0x54
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e6      	bne.n	80035fa <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800362c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8003636:	e007      	b.n	8003648 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800363a:	1c53      	adds	r3, r2, #1
 800363c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363e:	697c      	ldr	r4, [r7, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	2020      	movs	r0, #32
 8003646:	47a0      	blx	r4
          while (l++ < width) {
 8003648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800364e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003650:	429a      	cmp	r2, r3
 8003652:	d8f1      	bhi.n	8003638 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3301      	adds	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
        break;
 800365a:	e066      	b.n	800372a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800365c:	2308      	movs	r3, #8
 800365e:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003662:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8003666:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 800366e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003672:	2b00      	cmp	r3, #0
 8003674:	d023      	beq.n	80036be <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003676:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800367a:	1d1a      	adds	r2, r3, #4
 800367c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	2300      	movs	r3, #0
 8003686:	603a      	str	r2, [r7, #0]
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800368c:	9308      	str	r3, [sp, #32]
 800368e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003690:	9307      	str	r3, [sp, #28]
 8003692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003694:	9306      	str	r3, [sp, #24]
 8003696:	f04f 0210 	mov.w	r2, #16
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80036aa:	e9cd 3400 	strd	r3, r4, [sp]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036b2:	6939      	ldr	r1, [r7, #16]
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	f7fe fe0b 	bl	80022d0 <_ntoa_long_long>
 80036ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80036bc:	e018      	b.n	80036f0 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80036be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036ce:	9305      	str	r3, [sp, #20]
 80036d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036d2:	9304      	str	r3, [sp, #16]
 80036d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	2310      	movs	r3, #16
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	2300      	movs	r3, #0
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	9200      	str	r2, [sp, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036e6:	6939      	ldr	r1, [r7, #16]
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f7fe fd8b 	bl	8002204 <_ntoa_long>
 80036ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]
        break;
 80036f6:	e018      	b.n	800372a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80036f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036fa:	1c53      	adds	r3, r2, #1
 80036fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036fe:	697c      	ldr	r4, [r7, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6939      	ldr	r1, [r7, #16]
 8003704:	2025      	movs	r0, #37	@ 0x25
 8003706:	47a0      	blx	r4
        format++;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	3301      	adds	r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
        break;
 800370e:	e00c      	b.n	800372a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	7818      	ldrb	r0, [r3, #0]
 8003714:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003716:	1c53      	adds	r3, r2, #1
 8003718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800371a:	697c      	ldr	r4, [r7, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6939      	ldr	r1, [r7, #16]
 8003720:	47a0      	blx	r4
        format++;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3301      	adds	r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
        break;
 8003728:	bf00      	nop
  while (*format)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f47f ab30 	bne.w	8002d94 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <_vsnprintf+0x9d2>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e5a      	subs	r2, r3, #1
 8003740:	e000      	b.n	8003744 <_vsnprintf+0x9d4>
 8003742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003744:	697c      	ldr	r4, [r7, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6939      	ldr	r1, [r7, #16]
 800374a:	2000      	movs	r0, #0
 800374c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800374e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003750:	4618      	mov	r0, r3
 8003752:	3764      	adds	r7, #100	@ 0x64
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375a:	bf00      	nop

0800375c <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800375c:	b40e      	push	{r1, r2, r3}
 800375e:	b580      	push	{r7, lr}
 8003760:	b087      	sub	sp, #28
 8003762:	af02      	add	r7, sp, #8
 8003764:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003766:	f107 0320 	add.w	r3, r7, #32
 800376a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f04f 32ff 	mov.w	r2, #4294967295
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4805      	ldr	r0, [pc, #20]	@ (8003790 <sprintf_+0x34>)
 800377a:	f7ff faf9 	bl	8002d70 <_vsnprintf>
 800377e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003780:	68fb      	ldr	r3, [r7, #12]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800378c:	b003      	add	sp, #12
 800378e:	4770      	bx	lr
 8003790:	08001eb3 	.word	0x08001eb3

08003794 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003798:	4b18      	ldr	r3, [pc, #96]	@ (80037fc <MX_SPI2_Init+0x68>)
 800379a:	4a19      	ldr	r2, [pc, #100]	@ (8003800 <MX_SPI2_Init+0x6c>)
 800379c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037ba:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037bc:	2201      	movs	r2, #1
 80037be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037ca:	2208      	movs	r2, #8
 80037cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80037d4:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037da:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037dc:	2200      	movs	r2, #0
 80037de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037e2:	220a      	movs	r2, #10
 80037e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80037e6:	4805      	ldr	r0, [pc, #20]	@ (80037fc <MX_SPI2_Init+0x68>)
 80037e8:	f001 fd42 	bl	8005270 <HAL_SPI_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80037f2:	f7fe f809 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000278 	.word	0x20000278
 8003800:	40003800 	.word	0x40003800

08003804 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	@ 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a19      	ldr	r2, [pc, #100]	@ (8003888 <HAL_SPI_MspInit+0x84>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d12c      	bne.n	8003880 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <HAL_SPI_MspInit+0x88>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	4a17      	ldr	r2, [pc, #92]	@ (800388c <HAL_SPI_MspInit+0x88>)
 8003830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003834:	6413      	str	r3, [r2, #64]	@ 0x40
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_SPI_MspInit+0x88>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b11      	ldr	r3, [pc, #68]	@ (800388c <HAL_SPI_MspInit+0x88>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	4a10      	ldr	r2, [pc, #64]	@ (800388c <HAL_SPI_MspInit+0x88>)
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	6313      	str	r3, [r2, #48]	@ 0x30
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_SPI_MspInit+0x88>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800385e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386c:	2303      	movs	r3, #3
 800386e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003870:	2305      	movs	r3, #5
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	4619      	mov	r1, r3
 800387a:	4805      	ldr	r0, [pc, #20]	@ (8003890 <HAL_SPI_MspInit+0x8c>)
 800387c:	f000 fec2 	bl	8004604 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003880:	bf00      	nop
 8003882:	3728      	adds	r7, #40	@ 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40003800 	.word	0x40003800
 800388c:	40023800 	.word	0x40023800
 8003890:	40020400 	.word	0x40020400

08003894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a08      	ldr	r2, [pc, #32]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_MspInit+0x4c>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <NMI_Handler+0x4>

080038ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <HardFault_Handler+0x4>

080038f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <MemManage_Handler+0x4>

080038fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <BusFault_Handler+0x4>

08003904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <UsageFault_Handler+0x4>

0800390c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800393a:	f000 fc5f 	bl	80041fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003948:	4802      	ldr	r0, [pc, #8]	@ (8003954 <TIM2_IRQHandler+0x10>)
 800394a:	f002 fbeb 	bl	8006124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200002d0 	.word	0x200002d0

08003958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <USART2_IRQHandler+0x10>)
 800395e:	f003 fb0b 	bl	8006f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200003a8 	.word	0x200003a8

0800396c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <SystemInit+0x20>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	4a05      	ldr	r2, [pc, #20]	@ (800398c <SystemInit+0x20>)
 8003978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800397c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a4:	463b      	mov	r3, r7
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039b6:	2210      	movs	r2, #16
 80039b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80039c0:	4b18      	ldr	r3, [pc, #96]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039c2:	220a      	movs	r2, #10
 80039c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c6:	4b17      	ldr	r3, [pc, #92]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039cc:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039d2:	4814      	ldr	r0, [pc, #80]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039d4:	f002 f9f4 	bl	8005dc0 <HAL_TIM_Base_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80039de:	f7fd ff13 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	4619      	mov	r1, r3
 80039ee:	480d      	ldr	r0, [pc, #52]	@ (8003a24 <MX_TIM2_Init+0x94>)
 80039f0:	f002 fd62 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80039fa:	f7fd ff05 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039fe:	2320      	movs	r3, #32
 8003a00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a06:	463b      	mov	r3, r7
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4806      	ldr	r0, [pc, #24]	@ (8003a24 <MX_TIM2_Init+0x94>)
 8003a0c:	f003 f91a 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003a16:	f7fd fef7 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200002d0 	.word	0x200002d0

08003a28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a2e:	f107 0320 	add.w	r3, r7, #32
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	60da      	str	r2, [r3, #12]
 8003a44:	611a      	str	r2, [r3, #16]
 8003a46:	615a      	str	r2, [r3, #20]
 8003a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a4c:	4a27      	ldr	r2, [pc, #156]	@ (8003aec <MX_TIM3_Init+0xc4>)
 8003a4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8003a50:	4b25      	ldr	r3, [pc, #148]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a52:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a58:	4b23      	ldr	r3, [pc, #140]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003a5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a60:	2263      	movs	r2, #99	@ 0x63
 8003a62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a64:	4b20      	ldr	r3, [pc, #128]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a70:	481d      	ldr	r0, [pc, #116]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a72:	f002 fa57 	bl	8005f24 <HAL_TIM_PWM_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003a7c:	f7fd fec4 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a88:	f107 0320 	add.w	r3, r7, #32
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4816      	ldr	r0, [pc, #88]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003a90:	f003 f8d8 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003a9a:	f7fd feb5 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a9e:	2360      	movs	r3, #96	@ 0x60
 8003aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	480c      	ldr	r0, [pc, #48]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003ab6:	f002 fc3d 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003ac0:	f7fd fea2 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4807      	ldr	r0, [pc, #28]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003acc:	f002 fc32 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003ad6:	f7fd fe97 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ada:	4803      	ldr	r0, [pc, #12]	@ (8003ae8 <MX_TIM3_Init+0xc0>)
 8003adc:	f000 f8ca 	bl	8003c74 <HAL_TIM_MspPostInit>

}
 8003ae0:	bf00      	nop
 8003ae2:	3728      	adds	r7, #40	@ 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000318 	.word	0x20000318
 8003aec:	40000400 	.word	0x40000400

08003af0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af6:	f107 0320 	add.w	r3, r7, #32
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b00:	1d3b      	adds	r3, r7, #4
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	611a      	str	r2, [r3, #16]
 8003b0e:	615a      	str	r2, [r3, #20]
 8003b10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b12:	4b27      	ldr	r3, [pc, #156]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b14:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <MX_TIM4_Init+0xc4>)
 8003b16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8003b18:	4b25      	ldr	r3, [pc, #148]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b1a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003b1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b20:	4b23      	ldr	r3, [pc, #140]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8003b26:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b28:	2263      	movs	r2, #99	@ 0x63
 8003b2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2c:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b32:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003b38:	481d      	ldr	r0, [pc, #116]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b3a:	f002 f9f3 	bl	8005f24 <HAL_TIM_PWM_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003b44:	f7fd fe60 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b50:	f107 0320 	add.w	r3, r7, #32
 8003b54:	4619      	mov	r1, r3
 8003b56:	4816      	ldr	r0, [pc, #88]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b58:	f003 f874 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003b62:	f7fd fe51 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b66:	2360      	movs	r3, #96	@ 0x60
 8003b68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	480c      	ldr	r0, [pc, #48]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b7e:	f002 fbd9 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003b88:	f7fd fe3e 	bl	8001808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	2204      	movs	r2, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4807      	ldr	r0, [pc, #28]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003b94:	f002 fbce 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003b9e:	f7fd fe33 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003ba2:	4803      	ldr	r0, [pc, #12]	@ (8003bb0 <MX_TIM4_Init+0xc0>)
 8003ba4:	f000 f866 	bl	8003c74 <HAL_TIM_MspPostInit>

}
 8003ba8:	bf00      	nop
 8003baa:	3728      	adds	r7, #40	@ 0x28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000360 	.word	0x20000360
 8003bb4:	40000800 	.word	0x40000800

08003bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc8:	d115      	bne.n	8003bf6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <HAL_TIM_Base_MspInit+0x48>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8003c00 <HAL_TIM_Base_MspInit+0x48>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <HAL_TIM_Base_MspInit+0x48>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	201c      	movs	r0, #28
 8003bec:	f000 fc25 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bf0:	201c      	movs	r0, #28
 8003bf2:	f000 fc3e 	bl	8004472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800

08003c04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <HAL_TIM_PWM_MspInit+0x64>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c26:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c32:	e012      	b.n	8003c5a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	@ (8003c70 <HAL_TIM_PWM_MspInit+0x6c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10d      	bne.n	8003c5a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a09      	ldr	r2, [pc, #36]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4e:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40000800 	.word	0x40000800

08003c74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	@ 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a24      	ldr	r2, [pc, #144]	@ (8003d24 <HAL_TIM_MspPostInit+0xb0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d11e      	bne.n	8003cd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	4b23      	ldr	r3, [pc, #140]	@ (8003d28 <HAL_TIM_MspPostInit+0xb4>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <HAL_TIM_MspPostInit+0xb4>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca6:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <HAL_TIM_MspPostInit+0xb4>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cb2:	23c0      	movs	r3, #192	@ 0xc0
 8003cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4817      	ldr	r0, [pc, #92]	@ (8003d2c <HAL_TIM_MspPostInit+0xb8>)
 8003cce:	f000 fc99 	bl	8004604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003cd2:	e022      	b.n	8003d1a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <HAL_TIM_MspPostInit+0xbc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d11d      	bne.n	8003d1a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <HAL_TIM_MspPostInit+0xb4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a10      	ldr	r2, [pc, #64]	@ (8003d28 <HAL_TIM_MspPostInit+0xb4>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <HAL_TIM_MspPostInit+0xb4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cfa:	23c0      	movs	r3, #192	@ 0xc0
 8003cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d06:	2300      	movs	r3, #0
 8003d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	4619      	mov	r1, r3
 8003d14:	4807      	ldr	r0, [pc, #28]	@ (8003d34 <HAL_TIM_MspPostInit+0xc0>)
 8003d16:	f000 fc75 	bl	8004604 <HAL_GPIO_Init>
}
 8003d1a:	bf00      	nop
 8003d1c:	3728      	adds	r7, #40	@ 0x28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40020000 	.word	0x40020000
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40020400 	.word	0x40020400

08003d38 <tle5012_ReadAngle>:
 * Description  : ��ȡ���ԽǶ�ֵ
 * Parameters   : none
 * Returns      : none
************************************************/
float tle5012_ReadAngle(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
	/*0x4000 = -180			0x3FFF = +179.99*/
//	return (float)( tle5012_ReadValue(READ_ANGLE_VALUE) * ANG_RATIO );
	uint16_t var,res1,res2;
	float angle;

	var = READ_ANGLE_VALUE;
 8003d3e:	f248 0321 	movw	r3, #32801	@ 0x8021
 8003d42:	817b      	strh	r3, [r7, #10]
	SPI_CS_ENABLE;
 8003d44:	2200      	movs	r2, #0
 8003d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d4a:	481a      	ldr	r0, [pc, #104]	@ (8003db4 <tle5012_ReadAngle+0x7c>)
 8003d4c:	f000 fdde 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003d50:	f107 010a 	add.w	r1, r7, #10
 8003d54:	23ff      	movs	r3, #255	@ 0xff
 8003d56:	2201      	movs	r2, #1
 8003d58:	4817      	ldr	r0, [pc, #92]	@ (8003db8 <tle5012_ReadAngle+0x80>)
 8003d5a:	f001 fb12 	bl	8005382 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003d5e:	f107 0108 	add.w	r1, r7, #8
 8003d62:	23ff      	movs	r3, #255	@ 0xff
 8003d64:	2201      	movs	r2, #1
 8003d66:	4814      	ldr	r0, [pc, #80]	@ (8003db8 <tle5012_ReadAngle+0x80>)
 8003d68:	f001 fc47 	bl	80055fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res2), 1, 0xff);
 8003d6c:	1db9      	adds	r1, r7, #6
 8003d6e:	23ff      	movs	r3, #255	@ 0xff
 8003d70:	2201      	movs	r2, #1
 8003d72:	4811      	ldr	r0, [pc, #68]	@ (8003db8 <tle5012_ReadAngle+0x80>)
 8003d74:	f001 fc41 	bl	80055fa <HAL_SPI_Receive>
	res1 = res1&0x7FFF;
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	813b      	strh	r3, [r7, #8]
	SPI_CS_DISABLE;
 8003d82:	2201      	movs	r2, #1
 8003d84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d88:	480a      	ldr	r0, [pc, #40]	@ (8003db4 <tle5012_ReadAngle+0x7c>)
 8003d8a:	f000 fdbf 	bl	800490c <HAL_GPIO_WritePin>
	angle = (float)(res1*ANG_RATIO);
 8003d8e:	893b      	ldrh	r3, [r7, #8]
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d98:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003dbc <tle5012_ReadAngle+0x84>
 8003d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da0:	edc7 7a03 	vstr	s15, [r7, #12]
	//if (angle>0) {angle=(180+angle);}
	//if (angle<0) {angle=180+(180+angle);}
	//if (angle<0) {angle=180+(180+angle);}
	//sprintf_min((char*)stringo,"rx angle: %.2f \r\n",angle);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	return(angle);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	ee07 3a90 	vmov	s15, r3
}
 8003daa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40020000 	.word	0x40020000
 8003db8:	20000278 	.word	0x20000278
 8003dbc:	3c33fea0 	.word	0x3c33fea0

08003dc0 <tle5012_ReadAngle2>:



void tle5012_ReadAngle2(float* angle)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	/*0x4000 = -180			0x3FFF = +179.99*/
//	return (float)( tle5012_ReadValue(READ_ANGLE_VALUE) * ANG_RATIO );
	uint16_t var,res1,res2;
	//float angle;

	var = READ_ANGLE_VALUE;
 8003dc8:	f248 0321 	movw	r3, #32801	@ 0x8021
 8003dcc:	81fb      	strh	r3, [r7, #14]
	SPI_CS_ENABLE2;
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dd4:	4819      	ldr	r0, [pc, #100]	@ (8003e3c <tle5012_ReadAngle2+0x7c>)
 8003dd6:	f000 fd99 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003dda:	f107 010e 	add.w	r1, r7, #14
 8003dde:	23ff      	movs	r3, #255	@ 0xff
 8003de0:	2201      	movs	r2, #1
 8003de2:	4817      	ldr	r0, [pc, #92]	@ (8003e40 <tle5012_ReadAngle2+0x80>)
 8003de4:	f001 facd 	bl	8005382 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003de8:	f107 010c 	add.w	r1, r7, #12
 8003dec:	23ff      	movs	r3, #255	@ 0xff
 8003dee:	2201      	movs	r2, #1
 8003df0:	4813      	ldr	r0, [pc, #76]	@ (8003e40 <tle5012_ReadAngle2+0x80>)
 8003df2:	f001 fc02 	bl	80055fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res2), 1, 0xff);
 8003df6:	f107 010a 	add.w	r1, r7, #10
 8003dfa:	23ff      	movs	r3, #255	@ 0xff
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	4810      	ldr	r0, [pc, #64]	@ (8003e40 <tle5012_ReadAngle2+0x80>)
 8003e00:	f001 fbfb 	bl	80055fa <HAL_SPI_Receive>
	res1 = res1&0x7FFF;
 8003e04:	89bb      	ldrh	r3, [r7, #12]
 8003e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	81bb      	strh	r3, [r7, #12]
	SPI_CS_DISABLE2;
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e14:	4809      	ldr	r0, [pc, #36]	@ (8003e3c <tle5012_ReadAngle2+0x7c>)
 8003e16:	f000 fd79 	bl	800490c <HAL_GPIO_WritePin>
	*angle = (float)(res1*ANG_RATIO);
 8003e1a:	89bb      	ldrh	r3, [r7, #12]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e24:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003e44 <tle5012_ReadAngle2+0x84>
 8003e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	edc3 7a00 	vstr	s15, [r3]
	//sprintf_min((char*)stringo,"rx angle: %.2f \r\n",*angle);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	//return(&angle);
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	20000278 	.word	0x20000278
 8003e44:	3c33fea0 	.word	0x3c33fea0

08003e48 <tle5012_ReadRevol>:
 * Description  : ��ת�٣���ʱ���һ
 * Parameters   : DirΪ0������˳�� DirΪ1���෴
 * Returns      : none
************************************************/
int16_t tle5012_ReadRevol(uint8_t Dir)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
	uint16_t var,res1;
	int16_t revol;
	var = READ_RECOL_VALUE;
 8003e52:	f248 0341 	movw	r3, #32833	@ 0x8041
 8003e56:	81bb      	strh	r3, [r7, #12]
	SPI_CS_ENABLE;
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e5e:	4822      	ldr	r0, [pc, #136]	@ (8003ee8 <tle5012_ReadRevol+0xa0>)
 8003e60:	f000 fd54 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003e64:	f107 010c 	add.w	r1, r7, #12
 8003e68:	23ff      	movs	r3, #255	@ 0xff
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	481f      	ldr	r0, [pc, #124]	@ (8003eec <tle5012_ReadRevol+0xa4>)
 8003e6e:	f001 fa88 	bl	8005382 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003e72:	f107 010a 	add.w	r1, r7, #10
 8003e76:	23ff      	movs	r3, #255	@ 0xff
 8003e78:	2201      	movs	r2, #1
 8003e7a:	481c      	ldr	r0, [pc, #112]	@ (8003eec <tle5012_ReadRevol+0xa4>)
 8003e7c:	f001 fbbd 	bl	80055fa <HAL_SPI_Receive>
	res1 = res1&0x1FF;
 8003e80:	897b      	ldrh	r3, [r7, #10]
 8003e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	817b      	strh	r3, [r7, #10]
	if(res1&0x100)			//Ϊ����
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d010      	beq.n	8003eb6 <tle5012_ReadRevol+0x6e>
	{
		res1 = ~res1;
 8003e94:	897b      	ldrh	r3, [r7, #10]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	817b      	strh	r3, [r7, #10]
		res1 &= 0x00FF;
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	817b      	strh	r3, [r7, #10]
		res1++;
 8003ea4:	897b      	ldrh	r3, [r7, #10]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)(0-res1);
 8003eac:	897b      	ldrh	r3, [r7, #10]
 8003eae:	425b      	negs	r3, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	81fb      	strh	r3, [r7, #14]
 8003eb4:	e005      	b.n	8003ec2 <tle5012_ReadRevol+0x7a>
	}
	else
	{
		res1 &= 0x00FF;
 8003eb6:	897b      	ldrh	r3, [r7, #10]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)res1;
 8003ebe:	897b      	ldrh	r3, [r7, #10]
 8003ec0:	81fb      	strh	r3, [r7, #14]
	}
	if(Dir)	revol = (int16_t)(0-revol);
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <tle5012_ReadRevol+0x88>
 8003ec8:	89fb      	ldrh	r3, [r7, #14]
 8003eca:	425b      	negs	r3, r3
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	81fb      	strh	r3, [r7, #14]
	//sprintf_min((char*)stringo,"rx revol: %d \r\n",revol);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	SPI_CS_DISABLE;
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ed6:	4804      	ldr	r0, [pc, #16]	@ (8003ee8 <tle5012_ReadRevol+0xa0>)
 8003ed8:	f000 fd18 	bl	800490c <HAL_GPIO_WritePin>
	return(revol);
 8003edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	20000278 	.word	0x20000278

08003ef0 <tle5012_ReadRevol2>:

int16_t tle5012_ReadRevol2(uint8_t Dir)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
	uint16_t var,res1;
	int16_t revol;
	var = READ_RECOL_VALUE;
 8003efa:	f248 0341 	movw	r3, #32833	@ 0x8041
 8003efe:	81bb      	strh	r3, [r7, #12]
	SPI_CS_ENABLE2;
 8003f00:	2200      	movs	r2, #0
 8003f02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f06:	4822      	ldr	r0, [pc, #136]	@ (8003f90 <tle5012_ReadRevol2+0xa0>)
 8003f08:	f000 fd00 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003f0c:	f107 010c 	add.w	r1, r7, #12
 8003f10:	23ff      	movs	r3, #255	@ 0xff
 8003f12:	2201      	movs	r2, #1
 8003f14:	481f      	ldr	r0, [pc, #124]	@ (8003f94 <tle5012_ReadRevol2+0xa4>)
 8003f16:	f001 fa34 	bl	8005382 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003f1a:	f107 010a 	add.w	r1, r7, #10
 8003f1e:	23ff      	movs	r3, #255	@ 0xff
 8003f20:	2201      	movs	r2, #1
 8003f22:	481c      	ldr	r0, [pc, #112]	@ (8003f94 <tle5012_ReadRevol2+0xa4>)
 8003f24:	f001 fb69 	bl	80055fa <HAL_SPI_Receive>
	res1 = res1&0x1FF;
 8003f28:	897b      	ldrh	r3, [r7, #10]
 8003f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	817b      	strh	r3, [r7, #10]
	if(res1&0x100)			//Ϊ����
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <tle5012_ReadRevol2+0x6e>
	{
		res1 = ~res1;
 8003f3c:	897b      	ldrh	r3, [r7, #10]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	817b      	strh	r3, [r7, #10]
		res1 &= 0x00FF;
 8003f44:	897b      	ldrh	r3, [r7, #10]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	817b      	strh	r3, [r7, #10]
		res1++;
 8003f4c:	897b      	ldrh	r3, [r7, #10]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)(0-res1);
 8003f54:	897b      	ldrh	r3, [r7, #10]
 8003f56:	425b      	negs	r3, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	81fb      	strh	r3, [r7, #14]
 8003f5c:	e005      	b.n	8003f6a <tle5012_ReadRevol2+0x7a>
	}
	else
	{
		res1 &= 0x00FF;
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)res1;
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	81fb      	strh	r3, [r7, #14]
	}
	if(Dir)	revol = (int16_t)(0-revol);
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <tle5012_ReadRevol2+0x88>
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	425b      	negs	r3, r3
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	81fb      	strh	r3, [r7, #14]
	//sprintf_min((char*)stringo,"rx revol: %d \r\n",revol);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	SPI_CS_DISABLE2;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f7e:	4804      	ldr	r0, [pc, #16]	@ (8003f90 <tle5012_ReadRevol2+0xa0>)
 8003f80:	f000 fcc4 	bl	800490c <HAL_GPIO_WritePin>
	return(revol);
 8003f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40020000 	.word	0x40020000
 8003f94:	20000278 	.word	0x20000278

08003f98 <tle5012_Rset>:
 * Parameters   : DirΪ0������˳�� DirΪ1���෴
 * Returns      : none
************************************************/
//0101 1011 1111 1110       Write:0x5BFF��λӲ��
void tle5012_Rset(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
	uint16_t var,res1;
	var = WRITE_ACSTAT_VALUE;
 8003f9e:	2311      	movs	r3, #17
 8003fa0:	80fb      	strh	r3, [r7, #6]
	SPI_CS_ENABLE;
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fa8:	4810      	ldr	r0, [pc, #64]	@ (8003fec <tle5012_Rset+0x54>)
 8003faa:	f000 fcaf 	bl	800490c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003fae:	1db9      	adds	r1, r7, #6
 8003fb0:	23ff      	movs	r3, #255	@ 0xff
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	480e      	ldr	r0, [pc, #56]	@ (8003ff0 <tle5012_Rset+0x58>)
 8003fb6:	f001 f9e4 	bl	8005382 <HAL_SPI_Transmit>
	var = 0x5BFF;
 8003fba:	f645 33ff 	movw	r3, #23551	@ 0x5bff
 8003fbe:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003fc0:	1db9      	adds	r1, r7, #6
 8003fc2:	23ff      	movs	r3, #255	@ 0xff
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	480a      	ldr	r0, [pc, #40]	@ (8003ff0 <tle5012_Rset+0x58>)
 8003fc8:	f001 f9db 	bl	8005382 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003fcc:	1d39      	adds	r1, r7, #4
 8003fce:	23ff      	movs	r3, #255	@ 0xff
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4807      	ldr	r0, [pc, #28]	@ (8003ff0 <tle5012_Rset+0x58>)
 8003fd4:	f001 fb11 	bl	80055fa <HAL_SPI_Receive>
	SPI_CS_DISABLE;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fde:	4803      	ldr	r0, [pc, #12]	@ (8003fec <tle5012_Rset+0x54>)
 8003fe0:	f000 fc94 	bl	800490c <HAL_GPIO_WritePin>
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	20000278 	.word	0x20000278

08003ff4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 8003ffa:	4a12      	ldr	r2, [pc, #72]	@ (8004044 <MX_USART2_UART_Init+0x50>)
 8003ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ffe:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 8004000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004006:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004012:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 8004014:	2200      	movs	r2, #0
 8004016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004018:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 800401a:	220c      	movs	r2, #12
 800401c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800401e:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 8004020:	2200      	movs	r2, #0
 8004022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004024:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 8004026:	2200      	movs	r2, #0
 8004028:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800402a:	4805      	ldr	r0, [pc, #20]	@ (8004040 <MX_USART2_UART_Init+0x4c>)
 800402c:	f002 fe8c 	bl	8006d48 <HAL_HalfDuplex_Init>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004036:	f7fd fbe7 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	200003a8 	.word	0x200003a8
 8004044:	40004400 	.word	0x40004400

08004048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	@ 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_UART_MspInit+0x94>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d133      	bne.n	80040d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	4b1c      	ldr	r3, [pc, #112]	@ (80040e0 <HAL_UART_MspInit+0x98>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	4a1b      	ldr	r2, [pc, #108]	@ (80040e0 <HAL_UART_MspInit+0x98>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004078:	6413      	str	r3, [r2, #64]	@ 0x40
 800407a:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <HAL_UART_MspInit+0x98>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_UART_MspInit+0x98>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	4a14      	ldr	r2, [pc, #80]	@ (80040e0 <HAL_UART_MspInit+0x98>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6313      	str	r3, [r2, #48]	@ 0x30
 8004096:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_UART_MspInit+0x98>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040a2:	2304      	movs	r3, #4
 80040a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040a6:	2312      	movs	r3, #18
 80040a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040b2:	2307      	movs	r3, #7
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	4809      	ldr	r0, [pc, #36]	@ (80040e4 <HAL_UART_MspInit+0x9c>)
 80040be:	f000 faa1 	bl	8004604 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	2026      	movs	r0, #38	@ 0x26
 80040c8:	f000 f9b7 	bl	800443a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040cc:	2026      	movs	r0, #38	@ 0x26
 80040ce:	f000 f9d0 	bl	8004472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80040d2:	bf00      	nop
 80040d4:	3728      	adds	r7, #40	@ 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40004400 	.word	0x40004400
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020000 	.word	0x40020000

080040e8 <i_abs>:
	}
	return x;
}

int i_abs(int x)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    return x < 0 ? -x : x;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bfb8      	it	lt
 80040f6:	425b      	neglt	r3, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800413c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004108:	480d      	ldr	r0, [pc, #52]	@ (8004140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800410a:	490e      	ldr	r1, [pc, #56]	@ (8004144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800410c:	4a0e      	ldr	r2, [pc, #56]	@ (8004148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800410e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004110:	e002      	b.n	8004118 <LoopCopyDataInit>

08004112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004116:	3304      	adds	r3, #4

08004118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800411a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800411c:	d3f9      	bcc.n	8004112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800411e:	4a0b      	ldr	r2, [pc, #44]	@ (800414c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004120:	4c0b      	ldr	r4, [pc, #44]	@ (8004150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004124:	e001      	b.n	800412a <LoopFillZerobss>

08004126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004128:	3204      	adds	r2, #4

0800412a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800412a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800412c:	d3fb      	bcc.n	8004126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800412e:	f7ff fc1d 	bl	800396c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004132:	f003 fe97 	bl	8007e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004136:	f7fc ff77 	bl	8001028 <main>
  bx  lr    
 800413a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800413c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004144:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8004148:	08007f98 	.word	0x08007f98
  ldr r2, =_sbss
 800414c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004150:	200003f0 	.word	0x200003f0

08004154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004154:	e7fe      	b.n	8004154 <ADC_IRQHandler>
	...

08004158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800415c:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <HAL_Init+0x40>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0d      	ldr	r2, [pc, #52]	@ (8004198 <HAL_Init+0x40>)
 8004162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <HAL_Init+0x40>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <HAL_Init+0x40>)
 800416e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004174:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <HAL_Init+0x40>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a07      	ldr	r2, [pc, #28]	@ (8004198 <HAL_Init+0x40>)
 800417a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004180:	2003      	movs	r0, #3
 8004182:	f000 f94f 	bl	8004424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004186:	200f      	movs	r0, #15
 8004188:	f000 f808 	bl	800419c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800418c:	f7ff fb82 	bl	8003894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023c00 	.word	0x40023c00

0800419c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041a4:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <HAL_InitTick+0x54>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <HAL_InitTick+0x58>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	4619      	mov	r1, r3
 80041ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f967 	bl	800448e <HAL_SYSTICK_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e00e      	b.n	80041e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b0f      	cmp	r3, #15
 80041ce:	d80a      	bhi.n	80041e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d0:	2200      	movs	r2, #0
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	f000 f92f 	bl	800443a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041dc:	4a06      	ldr	r2, [pc, #24]	@ (80041f8 <HAL_InitTick+0x5c>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e000      	b.n	80041e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200000a0 	.word	0x200000a0
 80041f4:	200000a8 	.word	0x200000a8
 80041f8:	200000a4 	.word	0x200000a4

080041fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004200:	4b06      	ldr	r3, [pc, #24]	@ (800421c <HAL_IncTick+0x20>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_IncTick+0x24>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4413      	add	r3, r2
 800420c:	4a04      	ldr	r2, [pc, #16]	@ (8004220 <HAL_IncTick+0x24>)
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	200000a8 	.word	0x200000a8
 8004220:	200003ec 	.word	0x200003ec

08004224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return uwTick;
 8004228:	4b03      	ldr	r3, [pc, #12]	@ (8004238 <HAL_GetTick+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	200003ec 	.word	0x200003ec

0800423c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004244:	f7ff ffee 	bl	8004224 <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d005      	beq.n	8004262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <HAL_Delay+0x44>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004262:	bf00      	nop
 8004264:	f7ff ffde 	bl	8004224 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	429a      	cmp	r2, r3
 8004272:	d8f7      	bhi.n	8004264 <HAL_Delay+0x28>
  {
  }
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200000a8 	.word	0x200000a8

08004284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042a0:	4013      	ands	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042b6:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	60d3      	str	r3, [r2, #12]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d0:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <__NVIC_GetPriorityGrouping+0x18>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 0307 	and.w	r3, r3, #7
}
 80042da:	4618      	mov	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	db0b      	blt.n	8004312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	4907      	ldr	r1, [pc, #28]	@ (8004320 <__NVIC_EnableIRQ+0x38>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2001      	movs	r0, #1
 800430a:	fa00 f202 	lsl.w	r2, r0, r2
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000e100 	.word	0xe000e100

08004324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db0a      	blt.n	800434e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	490c      	ldr	r1, [pc, #48]	@ (8004370 <__NVIC_SetPriority+0x4c>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	440b      	add	r3, r1
 8004348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800434c:	e00a      	b.n	8004364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4908      	ldr	r1, [pc, #32]	@ (8004374 <__NVIC_SetPriority+0x50>)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3b04      	subs	r3, #4
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	440b      	add	r3, r1
 8004362:	761a      	strb	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000e100 	.word	0xe000e100
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	@ 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf28      	it	cs
 8004396:	2304      	movcs	r3, #4
 8004398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3304      	adds	r3, #4
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d902      	bls.n	80043a8 <NVIC_EncodePriority+0x30>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3b03      	subs	r3, #3
 80043a6:	e000      	b.n	80043aa <NVIC_EncodePriority+0x32>
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c0:	f04f 31ff 	mov.w	r1, #4294967295
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	43d9      	mvns	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	4313      	orrs	r3, r2
         );
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	@ 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043f0:	d301      	bcc.n	80043f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00f      	b.n	8004416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004420 <SysTick_Config+0x40>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fe:	210f      	movs	r1, #15
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f7ff ff8e 	bl	8004324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <SysTick_Config+0x40>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440e:	4b04      	ldr	r3, [pc, #16]	@ (8004420 <SysTick_Config+0x40>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	e000e010 	.word	0xe000e010

08004424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff29 	bl	8004284 <__NVIC_SetPriorityGrouping>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800444c:	f7ff ff3e 	bl	80042cc <__NVIC_GetPriorityGrouping>
 8004450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f7ff ff8e 	bl	8004378 <NVIC_EncodePriority>
 800445c:	4602      	mov	r2, r0
 800445e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff5d 	bl	8004324 <__NVIC_SetPriority>
}
 800446a:	bf00      	nop
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	4603      	mov	r3, r0
 800447a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff31 	bl	80042e8 <__NVIC_EnableIRQ>
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ffa2 	bl	80043e0 <SysTick_Config>
 800449c:	4603      	mov	r3, r0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e00e      	b.n	80044d6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	795b      	ldrb	r3, [r3, #5]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fc fcff 	bl	8000ecc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ec:	f7ff fe9a 	bl	8004224 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d008      	beq.n	8004510 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2280      	movs	r2, #128	@ 0x80
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e052      	b.n	80045b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0216 	bic.w	r2, r2, #22
 800451e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800452e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <HAL_DMA_Abort+0x62>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0208 	bic.w	r2, r2, #8
 800454e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004560:	e013      	b.n	800458a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004562:	f7ff fe5f 	bl	8004224 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b05      	cmp	r3, #5
 800456e:	d90c      	bls.n	800458a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2203      	movs	r2, #3
 800457a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e015      	b.n	80045b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e4      	bne.n	8004562 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	223f      	movs	r2, #63	@ 0x3f
 800459e:	409a      	lsls	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d004      	beq.n	80045dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2280      	movs	r2, #128	@ 0x80
 80045d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e00c      	b.n	80045f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2205      	movs	r2, #5
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	e159      	b.n	80048d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004620:	2201      	movs	r2, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	429a      	cmp	r2, r3
 800463a:	f040 8148 	bne.w	80048ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d005      	beq.n	8004656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004652:	2b02      	cmp	r3, #2
 8004654:	d130      	bne.n	80046b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800468c:	2201      	movs	r2, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 0201 	and.w	r2, r3, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d017      	beq.n	80046f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	2203      	movs	r2, #3
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d123      	bne.n	8004748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	220f      	movs	r2, #15
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	08da      	lsrs	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3208      	adds	r2, #8
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0203 	and.w	r2, r3, #3
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80a2 	beq.w	80048ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	4b57      	ldr	r3, [pc, #348]	@ (80048ec <HAL_GPIO_Init+0x2e8>)
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	4a56      	ldr	r2, [pc, #344]	@ (80048ec <HAL_GPIO_Init+0x2e8>)
 8004794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004798:	6453      	str	r3, [r2, #68]	@ 0x44
 800479a:	4b54      	ldr	r3, [pc, #336]	@ (80048ec <HAL_GPIO_Init+0x2e8>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047a6:	4a52      	ldr	r2, [pc, #328]	@ (80048f0 <HAL_GPIO_Init+0x2ec>)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a49      	ldr	r2, [pc, #292]	@ (80048f4 <HAL_GPIO_Init+0x2f0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d019      	beq.n	8004806 <HAL_GPIO_Init+0x202>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a48      	ldr	r2, [pc, #288]	@ (80048f8 <HAL_GPIO_Init+0x2f4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_GPIO_Init+0x1fe>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a47      	ldr	r2, [pc, #284]	@ (80048fc <HAL_GPIO_Init+0x2f8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00d      	beq.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a46      	ldr	r2, [pc, #280]	@ (8004900 <HAL_GPIO_Init+0x2fc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <HAL_GPIO_Init+0x1f6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a45      	ldr	r2, [pc, #276]	@ (8004904 <HAL_GPIO_Init+0x300>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_GPIO_Init+0x1f2>
 80047f2:	2304      	movs	r3, #4
 80047f4:	e008      	b.n	8004808 <HAL_GPIO_Init+0x204>
 80047f6:	2307      	movs	r3, #7
 80047f8:	e006      	b.n	8004808 <HAL_GPIO_Init+0x204>
 80047fa:	2303      	movs	r3, #3
 80047fc:	e004      	b.n	8004808 <HAL_GPIO_Init+0x204>
 80047fe:	2302      	movs	r3, #2
 8004800:	e002      	b.n	8004808 <HAL_GPIO_Init+0x204>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_GPIO_Init+0x204>
 8004806:	2300      	movs	r3, #0
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f002 0203 	and.w	r2, r2, #3
 800480e:	0092      	lsls	r2, r2, #2
 8004810:	4093      	lsls	r3, r2
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004818:	4935      	ldr	r1, [pc, #212]	@ (80048f0 <HAL_GPIO_Init+0x2ec>)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	3302      	adds	r3, #2
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004826:	4b38      	ldr	r3, [pc, #224]	@ (8004908 <HAL_GPIO_Init+0x304>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800484a:	4a2f      	ldr	r2, [pc, #188]	@ (8004908 <HAL_GPIO_Init+0x304>)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004850:	4b2d      	ldr	r3, [pc, #180]	@ (8004908 <HAL_GPIO_Init+0x304>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004874:	4a24      	ldr	r2, [pc, #144]	@ (8004908 <HAL_GPIO_Init+0x304>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800487a:	4b23      	ldr	r3, [pc, #140]	@ (8004908 <HAL_GPIO_Init+0x304>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800489e:	4a1a      	ldr	r2, [pc, #104]	@ (8004908 <HAL_GPIO_Init+0x304>)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048a4:	4b18      	ldr	r3, [pc, #96]	@ (8004908 <HAL_GPIO_Init+0x304>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004908 <HAL_GPIO_Init+0x304>)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3301      	adds	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	f67f aea2 	bls.w	8004620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	3724      	adds	r7, #36	@ 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40013800 	.word	0x40013800
 80048f4:	40020000 	.word	0x40020000
 80048f8:	40020400 	.word	0x40020400
 80048fc:	40020800 	.word	0x40020800
 8004900:	40020c00 	.word	0x40020c00
 8004904:	40021000 	.word	0x40021000
 8004908:	40013c00 	.word	0x40013c00

0800490c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
 8004918:	4613      	mov	r3, r2
 800491a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004928:	e003      	b.n	8004932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	041a      	lsls	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	619a      	str	r2, [r3, #24]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e267      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d075      	beq.n	8004a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495e:	4b88      	ldr	r3, [pc, #544]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d00c      	beq.n	8004984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4b85      	ldr	r3, [pc, #532]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004972:	2b08      	cmp	r3, #8
 8004974:	d112      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004976:	4b82      	ldr	r3, [pc, #520]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	4b7e      	ldr	r3, [pc, #504]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05b      	beq.n	8004a48 <HAL_RCC_OscConfig+0x108>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d157      	bne.n	8004a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e242      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x74>
 80049a6:	4b76      	ldr	r3, [pc, #472]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a75      	ldr	r2, [pc, #468]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e01d      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x98>
 80049be:	4b70      	ldr	r3, [pc, #448]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049d8:	4b69      	ldr	r3, [pc, #420]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a68      	ldr	r2, [pc, #416]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b66      	ldr	r3, [pc, #408]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a65      	ldr	r2, [pc, #404]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7ff fc14 	bl	8004224 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7ff fc10 	bl	8004224 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	@ 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e207      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b5b      	ldr	r3, [pc, #364]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0xc0>
 8004a1e:	e014      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7ff fc00 	bl	8004224 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7ff fbfc 	bl	8004224 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	@ 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1f3      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3a:	4b51      	ldr	r3, [pc, #324]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0xe8>
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a56:	4b4a      	ldr	r3, [pc, #296]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b47      	ldr	r3, [pc, #284]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6e:	4b44      	ldr	r3, [pc, #272]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d116      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1c7      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a92:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4937      	ldr	r1, [pc, #220]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	e03a      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab0:	4b34      	ldr	r3, [pc, #208]	@ (8004b84 <HAL_RCC_OscConfig+0x244>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7ff fbb5 	bl	8004224 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abe:	f7ff fbb1 	bl	8004224 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e1a8      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004adc:	4b28      	ldr	r3, [pc, #160]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4925      	ldr	r1, [pc, #148]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
 8004af0:	e015      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af2:	4b24      	ldr	r3, [pc, #144]	@ (8004b84 <HAL_RCC_OscConfig+0x244>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7ff fb94 	bl	8004224 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b00:	f7ff fb90 	bl	8004224 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e187      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b12:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d036      	beq.n	8004b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b32:	4b15      	ldr	r3, [pc, #84]	@ (8004b88 <HAL_RCC_OscConfig+0x248>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7ff fb74 	bl	8004224 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b40:	f7ff fb70 	bl	8004224 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e167      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x200>
 8004b5e:	e01b      	b.n	8004b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b60:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <HAL_RCC_OscConfig+0x248>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7ff fb5d 	bl	8004224 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	e00e      	b.n	8004b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7ff fb59 	bl	8004224 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d907      	bls.n	8004b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e150      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
 8004b80:	40023800 	.word	0x40023800
 8004b84:	42470000 	.word	0x42470000
 8004b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	4b88      	ldr	r3, [pc, #544]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ea      	bne.n	8004b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8097 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004baa:	4b81      	ldr	r3, [pc, #516]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	4b7d      	ldr	r3, [pc, #500]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd6:	4b77      	ldr	r3, [pc, #476]	@ (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d118      	bne.n	8004c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be2:	4b74      	ldr	r3, [pc, #464]	@ (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	@ (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bee:	f7ff fb19 	bl	8004224 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7ff fb15 	bl	8004224 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e10c      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c08:	4b6a      	ldr	r3, [pc, #424]	@ (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x2ea>
 8004c1c:	4b64      	ldr	r3, [pc, #400]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c20:	4a63      	ldr	r2, [pc, #396]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c28:	e01c      	b.n	8004c64 <HAL_RCC_OscConfig+0x324>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x30c>
 8004c32:	4b5f      	ldr	r3, [pc, #380]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	4a5e      	ldr	r2, [pc, #376]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c42:	4a5b      	ldr	r2, [pc, #364]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCC_OscConfig+0x324>
 8004c4c:	4b58      	ldr	r3, [pc, #352]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c50:	4a57      	ldr	r2, [pc, #348]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c58:	4b55      	ldr	r3, [pc, #340]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5c:	4a54      	ldr	r2, [pc, #336]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	f023 0304 	bic.w	r3, r3, #4
 8004c62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d015      	beq.n	8004c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7ff fada 	bl	8004224 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7ff fad6 	bl	8004224 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0cb      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8a:	4b49      	ldr	r3, [pc, #292]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0ee      	beq.n	8004c74 <HAL_RCC_OscConfig+0x334>
 8004c96:	e014      	b.n	8004cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7ff fac4 	bl	8004224 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca0:	f7ff fac0 	bl	8004224 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e0b5      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1ee      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc8:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	4a38      	ldr	r2, [pc, #224]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80a1 	beq.w	8004e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cde:	4b34      	ldr	r3, [pc, #208]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d05c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d141      	bne.n	8004d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7ff fa94 	bl	8004224 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d00:	f7ff fa90 	bl	8004224 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e087      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	3b01      	subs	r3, #1
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	491b      	ldr	r1, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d48:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7ff fa69 	bl	8004224 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d56:	f7ff fa65 	bl	8004224 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e05c      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d68:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x416>
 8004d74:	e054      	b.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d76:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7ff fa52 	bl	8004224 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d84:	f7ff fa4e 	bl	8004224 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e045      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	4b06      	ldr	r3, [pc, #24]	@ (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x444>
 8004da2:	e03d      	b.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e038      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000
 8004db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d121      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d11a      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d111      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	3b01      	subs	r3, #1
 8004e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800

08004e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0cc      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	4b68      	ldr	r3, [pc, #416]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d90c      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e52:	4b65      	ldr	r3, [pc, #404]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b63      	ldr	r3, [pc, #396]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0b8      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e84:	4b59      	ldr	r3, [pc, #356]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a58      	ldr	r2, [pc, #352]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e9c:	4b53      	ldr	r3, [pc, #332]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b50      	ldr	r3, [pc, #320]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	494d      	ldr	r1, [pc, #308]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d044      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b47      	ldr	r3, [pc, #284]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d119      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e07f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eee:	4b3f      	ldr	r3, [pc, #252]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efe:	4b3b      	ldr	r3, [pc, #236]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e067      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0e:	4b37      	ldr	r3, [pc, #220]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4934      	ldr	r1, [pc, #208]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f20:	f7ff f980 	bl	8004224 <HAL_GetTick>
 8004f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f28:	f7ff f97c 	bl	8004224 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 020c 	and.w	r2, r3, #12
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1eb      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f50:	4b25      	ldr	r3, [pc, #148]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20c      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b22      	ldr	r3, [pc, #136]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e032      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f84:	4b19      	ldr	r3, [pc, #100]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4916      	ldr	r1, [pc, #88]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa2:	4b12      	ldr	r3, [pc, #72]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	490e      	ldr	r1, [pc, #56]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fb6:	f000 f821 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	490a      	ldr	r1, [pc, #40]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	5ccb      	ldrb	r3, [r1, r3]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	4a09      	ldr	r2, [pc, #36]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff f8e0 	bl	800419c <HAL_InitTick>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023c00 	.word	0x40023c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	08007f70 	.word	0x08007f70
 8004ff4:	200000a0 	.word	0x200000a0
 8004ff8:	200000a4 	.word	0x200000a4

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b094      	sub	sp, #80	@ 0x50
 8005002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	647b      	str	r3, [r7, #68]	@ 0x44
 8005008:	2300      	movs	r3, #0
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500c:	2300      	movs	r3, #0
 800500e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005014:	4b79      	ldr	r3, [pc, #484]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d00d      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x40>
 8005020:	2b08      	cmp	r3, #8
 8005022:	f200 80e1 	bhi.w	80051e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x34>
 800502a:	2b04      	cmp	r3, #4
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x3a>
 800502e:	e0db      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b73      	ldr	r3, [pc, #460]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x204>)
 8005032:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005034:	e0db      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005036:	4b73      	ldr	r3, [pc, #460]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x208>)
 8005038:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800503a:	e0d8      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503c:	4b6f      	ldr	r3, [pc, #444]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005044:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005046:	4b6d      	ldr	r3, [pc, #436]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d063      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005052:	4b6a      	ldr	r3, [pc, #424]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	2200      	movs	r2, #0
 800505a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800505c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800505e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005064:	633b      	str	r3, [r7, #48]	@ 0x30
 8005066:	2300      	movs	r3, #0
 8005068:	637b      	str	r3, [r7, #52]	@ 0x34
 800506a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800506e:	4622      	mov	r2, r4
 8005070:	462b      	mov	r3, r5
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	0159      	lsls	r1, r3, #5
 800507c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005080:	0150      	lsls	r0, r2, #5
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4621      	mov	r1, r4
 8005088:	1a51      	subs	r1, r2, r1
 800508a:	6139      	str	r1, [r7, #16]
 800508c:	4629      	mov	r1, r5
 800508e:	eb63 0301 	sbc.w	r3, r3, r1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a0:	4659      	mov	r1, fp
 80050a2:	018b      	lsls	r3, r1, #6
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050aa:	4651      	mov	r1, sl
 80050ac:	018a      	lsls	r2, r1, #6
 80050ae:	4651      	mov	r1, sl
 80050b0:	ebb2 0801 	subs.w	r8, r2, r1
 80050b4:	4659      	mov	r1, fp
 80050b6:	eb63 0901 	sbc.w	r9, r3, r1
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ce:	4690      	mov	r8, r2
 80050d0:	4699      	mov	r9, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	eb18 0303 	adds.w	r3, r8, r3
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	462b      	mov	r3, r5
 80050dc:	eb49 0303 	adc.w	r3, r9, r3
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050ee:	4629      	mov	r1, r5
 80050f0:	024b      	lsls	r3, r1, #9
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050f8:	4621      	mov	r1, r4
 80050fa:	024a      	lsls	r2, r1, #9
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005102:	2200      	movs	r2, #0
 8005104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800510c:	f7fb fd52 	bl	8000bb4 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005118:	e058      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511a:	4b38      	ldr	r3, [pc, #224]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	2200      	movs	r2, #0
 8005122:	4618      	mov	r0, r3
 8005124:	4611      	mov	r1, r2
 8005126:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005130:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	f04f 0000 	mov.w	r0, #0
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	0159      	lsls	r1, r3, #5
 8005142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005146:	0150      	lsls	r0, r2, #5
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4641      	mov	r1, r8
 800514e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005152:	4649      	mov	r1, r9
 8005154:	eb63 0b01 	sbc.w	fp, r3, r1
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005164:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005168:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800516c:	ebb2 040a 	subs.w	r4, r2, sl
 8005170:	eb63 050b 	sbc.w	r5, r3, fp
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	00eb      	lsls	r3, r5, #3
 800517e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005182:	00e2      	lsls	r2, r4, #3
 8005184:	4614      	mov	r4, r2
 8005186:	461d      	mov	r5, r3
 8005188:	4643      	mov	r3, r8
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	464b      	mov	r3, r9
 8005190:	eb45 0303 	adc.w	r3, r5, r3
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051a2:	4629      	mov	r1, r5
 80051a4:	028b      	lsls	r3, r1, #10
 80051a6:	4621      	mov	r1, r4
 80051a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051ac:	4621      	mov	r1, r4
 80051ae:	028a      	lsls	r2, r1, #10
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b6:	2200      	movs	r2, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	61fa      	str	r2, [r7, #28]
 80051bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c0:	f7fb fcf8 	bl	8000bb4 <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4613      	mov	r3, r2
 80051ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051cc:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	3301      	adds	r3, #1
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80051dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051e6:	e002      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3750      	adds	r7, #80	@ 0x50
 80051f4:	46bd      	mov	sp, r7
 80051f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	00f42400 	.word	0x00f42400
 8005204:	007a1200 	.word	0x007a1200

08005208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800520c:	4b03      	ldr	r3, [pc, #12]	@ (800521c <HAL_RCC_GetHCLKFreq+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200000a0 	.word	0x200000a0

08005220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005224:	f7ff fff0 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b05      	ldr	r3, [pc, #20]	@ (8005240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	0a9b      	lsrs	r3, r3, #10
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4903      	ldr	r1, [pc, #12]	@ (8005244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40023800 	.word	0x40023800
 8005244:	08007f80 	.word	0x08007f80

08005248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800524c:	f7ff ffdc 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	0b5b      	lsrs	r3, r3, #13
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	4903      	ldr	r1, [pc, #12]	@ (800526c <HAL_RCC_GetPCLK2Freq+0x24>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	08007f80 	.word	0x08007f80

08005270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e07b      	b.n	800537a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d108      	bne.n	800529c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005292:	d009      	beq.n	80052a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	61da      	str	r2, [r3, #28]
 800529a:	e005      	b.n	80052a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fe fa9e 	bl	8003804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532c:	ea42 0103 	orr.w	r1, r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005334:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	f003 0104 	and.w	r1, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	f003 0210 	and.w	r2, r3, #16
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_SPI_Transmit+0x22>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e126      	b.n	80055f2 <HAL_SPI_Transmit+0x270>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ac:	f7fe ff3a 	bl	8004224 <HAL_GetTick>
 80053b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053c6:	e10b      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x52>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053d8:	e102      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005420:	d10f      	bne.n	8005442 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005440:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	d007      	beq.n	8005460 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800545e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005468:	d14b      	bne.n	8005502 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_SPI_Transmit+0xf6>
 8005472:	8afb      	ldrh	r3, [r7, #22]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d13e      	bne.n	80054f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800549c:	e02b      	b.n	80054f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d112      	bne.n	80054d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b0:	881a      	ldrh	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054bc:	1c9a      	adds	r2, r3, #2
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054d0:	e011      	b.n	80054f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d2:	f7fe fea7 	bl	8004224 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d803      	bhi.n	80054ea <HAL_SPI_Transmit+0x168>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d102      	bne.n	80054f0 <HAL_SPI_Transmit+0x16e>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054f4:	e074      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ce      	bne.n	800549e <HAL_SPI_Transmit+0x11c>
 8005500:	e04c      	b.n	800559c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_SPI_Transmit+0x18e>
 800550a:	8afb      	ldrh	r3, [r7, #22]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d140      	bne.n	8005592 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005536:	e02c      	b.n	8005592 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d113      	bne.n	800556e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800556c:	e011      	b.n	8005592 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800556e:	f7fe fe59 	bl	8004224 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d803      	bhi.n	8005586 <HAL_SPI_Transmit+0x204>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d102      	bne.n	800558c <HAL_SPI_Transmit+0x20a>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005590:	e026      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1cd      	bne.n	8005538 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fbcb 	bl	8005d3c <SPI_EndRxTxTransaction>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e000      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80055de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80055f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af02      	add	r7, sp, #8
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005616:	d112      	bne.n	800563e <HAL_SPI_Receive+0x44>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10e      	bne.n	800563e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2204      	movs	r2, #4
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005628:	88fa      	ldrh	r2, [r7, #6]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4613      	mov	r3, r2
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f8f1 	bl	800581c <HAL_SPI_TransmitReceive>
 800563a:	4603      	mov	r3, r0
 800563c:	e0ea      	b.n	8005814 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_SPI_Receive+0x52>
 8005648:	2302      	movs	r3, #2
 800564a:	e0e3      	b.n	8005814 <HAL_SPI_Receive+0x21a>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005654:	f7fe fde6 	bl	8004224 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d002      	beq.n	800566c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005666:	2302      	movs	r3, #2
 8005668:	75fb      	strb	r3, [r7, #23]
    goto error;
 800566a:	e0ca      	b.n	8005802 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Receive+0x7e>
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800567c:	e0c1      	b.n	8005802 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2204      	movs	r2, #4
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056c4:	d10f      	bne.n	80056e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d007      	beq.n	8005704 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d162      	bne.n	80057d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800570c:	e02e      	b.n	800576c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	d115      	bne.n	8005748 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f103 020c 	add.w	r2, r3, #12
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005746:	e011      	b.n	800576c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005748:	f7fe fd6c 	bl	8004224 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d803      	bhi.n	8005760 <HAL_SPI_Receive+0x166>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d102      	bne.n	8005766 <HAL_SPI_Receive+0x16c>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	75fb      	strb	r3, [r7, #23]
          goto error;
 800576a:	e04a      	b.n	8005802 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1cb      	bne.n	800570e <HAL_SPI_Receive+0x114>
 8005776:	e031      	b.n	80057dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d113      	bne.n	80057ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005790:	b292      	uxth	r2, r2
 8005792:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057ac:	e011      	b.n	80057d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ae:	f7fe fd39 	bl	8004224 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d803      	bhi.n	80057c6 <HAL_SPI_Receive+0x1cc>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d102      	bne.n	80057cc <HAL_SPI_Receive+0x1d2>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057d0:	e017      	b.n	8005802 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1cd      	bne.n	8005778 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fa45 	bl	8005c70 <SPI_EndRxTransaction>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75fb      	strb	r3, [r7, #23]
 80057fe:	e000      	b.n	8005802 <HAL_SPI_Receive+0x208>
  }

error :
 8005800:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	@ 0x30
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800582a:	2301      	movs	r3, #1
 800582c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_SPI_TransmitReceive+0x26>
 800583e:	2302      	movs	r3, #2
 8005840:	e18a      	b.n	8005b58 <HAL_SPI_TransmitReceive+0x33c>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800584a:	f7fe fceb 	bl	8004224 <HAL_GetTick>
 800584e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005860:	887b      	ldrh	r3, [r7, #2]
 8005862:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005864:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005868:	2b01      	cmp	r3, #1
 800586a:	d00f      	beq.n	800588c <HAL_SPI_TransmitReceive+0x70>
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005872:	d107      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d103      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x68>
 800587c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005880:	2b04      	cmp	r3, #4
 8005882:	d003      	beq.n	800588c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005884:	2302      	movs	r3, #2
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800588a:	e15b      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_SPI_TransmitReceive+0x82>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_SPI_TransmitReceive+0x82>
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058a4:	e14e      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d003      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2205      	movs	r2, #5
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	887a      	ldrh	r2, [r7, #2]
 80058dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d007      	beq.n	800590e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005916:	d178      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_TransmitReceive+0x10a>
 8005920:	8b7b      	ldrh	r3, [r7, #26]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d166      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800594a:	e053      	b.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d11b      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x176>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d016      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x176>
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d113      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d119      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x1b8>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	b292      	uxth	r2, r2
 80059b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059d0:	2301      	movs	r3, #1
 80059d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059d4:	f7fe fc26 	bl	8004224 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d807      	bhi.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ea:	d003      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80059f2:	e0a7      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1a6      	bne.n	800594c <HAL_SPI_TransmitReceive+0x130>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1a1      	bne.n	800594c <HAL_SPI_TransmitReceive+0x130>
 8005a08:	e07c      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_TransmitReceive+0x1fc>
 8005a12:	8b7b      	ldrh	r3, [r7, #26]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d16b      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3e:	e057      	b.n	8005af0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d11c      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x26c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d017      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x26c>
 8005a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d114      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d119      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x2ae>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d014      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aca:	f7fe fbab 	bl	8004224 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d803      	bhi.n	8005ae2 <HAL_SPI_TransmitReceive+0x2c6>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d102      	bne.n	8005ae8 <HAL_SPI_TransmitReceive+0x2cc>
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005aee:	e029      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1a2      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x224>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d19d      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f917 	bl	8005d3c <SPI_EndRxTxTransaction>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d006      	beq.n	8005b22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005b20:	e010      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	e000      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3730      	adds	r7, #48	@ 0x30
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b70:	f7fe fb58 	bl	8004224 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b80:	f7fe fb50 	bl	8004224 <HAL_GetTick>
 8005b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b86:	4b39      	ldr	r3, [pc, #228]	@ (8005c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	015b      	lsls	r3, r3, #5
 8005b8c:	0d1b      	lsrs	r3, r3, #20
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b96:	e054      	b.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d050      	beq.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba0:	f7fe fb40 	bl	8004224 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d902      	bls.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d13d      	bne.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bce:	d111      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd8:	d004      	beq.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be2:	d107      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfc:	d10f      	bne.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e017      	b.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d19b      	bne.n	8005b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200000a0 	.word	0x200000a0

08005c70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c84:	d111      	bne.n	8005caa <SPI_EndRxTransaction+0x3a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8e:	d004      	beq.n	8005c9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c98:	d107      	bne.n	8005caa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb2:	d12a      	bne.n	8005d0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cbc:	d012      	beq.n	8005ce4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2180      	movs	r1, #128	@ 0x80
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff ff49 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d02d      	beq.n	8005d30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e026      	b.n	8005d32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2101      	movs	r1, #1
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff36 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01a      	beq.n	8005d30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e013      	b.n	8005d32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	2101      	movs	r1, #1
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff ff23 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e000      	b.n	8005d32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d48:	4b1b      	ldr	r3, [pc, #108]	@ (8005db8 <SPI_EndRxTxTransaction+0x7c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dbc <SPI_EndRxTxTransaction+0x80>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	0d5b      	lsrs	r3, r3, #21
 8005d54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d66:	d112      	bne.n	8005d8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2180      	movs	r1, #128	@ 0x80
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fef4 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d016      	beq.n	8005dac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e00f      	b.n	8005dae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da4:	2b80      	cmp	r3, #128	@ 0x80
 8005da6:	d0f2      	beq.n	8005d8e <SPI_EndRxTxTransaction+0x52>
 8005da8:	e000      	b.n	8005dac <SPI_EndRxTxTransaction+0x70>
        break;
 8005daa:	bf00      	nop
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200000a0 	.word	0x200000a0
 8005dbc:	165e9f81 	.word	0x165e9f81

08005dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e041      	b.n	8005e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fd fee6 	bl	8003bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f000 fc54 	bl	80066ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d001      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e044      	b.n	8005f02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xb4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xb8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	@ (8005f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d111      	bne.n	8005ef0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d010      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	e007      	b.n	8005f00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40014000 	.word	0x40014000

08005f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e041      	b.n	8005fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fd fe5a 	bl	8003c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f000 fba2 	bl	80066ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <HAL_TIM_PWM_Start+0x24>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	bf14      	ite	ne
 8005fe0:	2301      	movne	r3, #1
 8005fe2:	2300      	moveq	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	e022      	b.n	800602e <HAL_TIM_PWM_Start+0x6a>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d109      	bne.n	8006002 <HAL_TIM_PWM_Start+0x3e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	bf14      	ite	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	2300      	moveq	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	e015      	b.n	800602e <HAL_TIM_PWM_Start+0x6a>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b08      	cmp	r3, #8
 8006006:	d109      	bne.n	800601c <HAL_TIM_PWM_Start+0x58>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	e008      	b.n	800602e <HAL_TIM_PWM_Start+0x6a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e068      	b.n	8006108 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <HAL_TIM_PWM_Start+0x82>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006044:	e013      	b.n	800606e <HAL_TIM_PWM_Start+0xaa>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b04      	cmp	r3, #4
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0x92>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006054:	e00b      	b.n	800606e <HAL_TIM_PWM_Start+0xaa>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xa2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006064:	e003      	b.n	800606e <HAL_TIM_PWM_Start+0xaa>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2201      	movs	r2, #1
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fdbe 	bl	8006bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a23      	ldr	r2, [pc, #140]	@ (8006110 <HAL_TIM_PWM_Start+0x14c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d107      	bne.n	8006096 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1d      	ldr	r2, [pc, #116]	@ (8006110 <HAL_TIM_PWM_Start+0x14c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <HAL_TIM_PWM_Start+0x10e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a8:	d013      	beq.n	80060d2 <HAL_TIM_PWM_Start+0x10e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a19      	ldr	r2, [pc, #100]	@ (8006114 <HAL_TIM_PWM_Start+0x150>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_TIM_PWM_Start+0x10e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a17      	ldr	r2, [pc, #92]	@ (8006118 <HAL_TIM_PWM_Start+0x154>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_TIM_PWM_Start+0x10e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a16      	ldr	r2, [pc, #88]	@ (800611c <HAL_TIM_PWM_Start+0x158>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_TIM_PWM_Start+0x10e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a14      	ldr	r2, [pc, #80]	@ (8006120 <HAL_TIM_PWM_Start+0x15c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d111      	bne.n	80060f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b06      	cmp	r3, #6
 80060e2:	d010      	beq.n	8006106 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f4:	e007      	b.n	8006106 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40014000 	.word	0x40014000

08006124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b02      	cmp	r3, #2
 8006138:	d122      	bne.n	8006180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d11b      	bne.n	8006180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0202 	mvn.w	r2, #2
 8006150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fa81 	bl	800666e <HAL_TIM_IC_CaptureCallback>
 800616c:	e005      	b.n	800617a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa73 	bl	800665a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fa84 	bl	8006682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b04      	cmp	r3, #4
 800618c:	d122      	bne.n	80061d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d11b      	bne.n	80061d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0204 	mvn.w	r2, #4
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2202      	movs	r2, #2
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa57 	bl	800666e <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fa49 	bl	800665a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fa5a 	bl	8006682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d122      	bne.n	8006228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d11b      	bne.n	8006228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0208 	mvn.w	r2, #8
 80061f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fa2d 	bl	800666e <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa1f 	bl	800665a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fa30 	bl	8006682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b10      	cmp	r3, #16
 8006234:	d122      	bne.n	800627c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b10      	cmp	r3, #16
 8006242:	d11b      	bne.n	800627c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0210 	mvn.w	r2, #16
 800624c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2208      	movs	r2, #8
 8006252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa03 	bl	800666e <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9f5 	bl	800665a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fa06 	bl	8006682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10e      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b01      	cmp	r3, #1
 8006296:	d107      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0201 	mvn.w	r2, #1
 80062a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9cf 	bl	8006646 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b2:	2b80      	cmp	r3, #128	@ 0x80
 80062b4:	d10e      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c0:	2b80      	cmp	r3, #128	@ 0x80
 80062c2:	d107      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fd30 	bl	8006d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062de:	2b40      	cmp	r3, #64	@ 0x40
 80062e0:	d10e      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	d107      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f9cb 	bl	8006696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d10e      	bne.n	800632c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b20      	cmp	r3, #32
 800631a:	d107      	bne.n	800632c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0220 	mvn.w	r2, #32
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fcfa 	bl	8006d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634e:	2302      	movs	r3, #2
 8006350:	e0ae      	b.n	80064b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	f200 809f 	bhi.w	80064a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006362:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800639d 	.word	0x0800639d
 800636c:	080064a1 	.word	0x080064a1
 8006370:	080064a1 	.word	0x080064a1
 8006374:	080064a1 	.word	0x080064a1
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080064a1 	.word	0x080064a1
 8006380:	080064a1 	.word	0x080064a1
 8006384:	080064a1 	.word	0x080064a1
 8006388:	0800641f 	.word	0x0800641f
 800638c:	080064a1 	.word	0x080064a1
 8006390:	080064a1 	.word	0x080064a1
 8006394:	080064a1 	.word	0x080064a1
 8006398:	0800645f 	.word	0x0800645f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fa02 	bl	80067ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0208 	orr.w	r2, r2, #8
 80063b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0204 	bic.w	r2, r2, #4
 80063c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6999      	ldr	r1, [r3, #24]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	619a      	str	r2, [r3, #24]
      break;
 80063da:	e064      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa48 	bl	8006878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6999      	ldr	r1, [r3, #24]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	619a      	str	r2, [r3, #24]
      break;
 800641c:	e043      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fa93 	bl	8006950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0208 	orr.w	r2, r2, #8
 8006438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0204 	bic.w	r2, r2, #4
 8006448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69d9      	ldr	r1, [r3, #28]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	61da      	str	r2, [r3, #28]
      break;
 800645c:	e023      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fadd 	bl	8006a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69d9      	ldr	r1, [r3, #28]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	61da      	str	r2, [r3, #28]
      break;
 800649e:	e002      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
      break;
 80064a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e0b4      	b.n	800663e <HAL_TIM_ConfigClockSource+0x186>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800650c:	d03e      	beq.n	800658c <HAL_TIM_ConfigClockSource+0xd4>
 800650e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006512:	f200 8087 	bhi.w	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651a:	f000 8086 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x172>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006522:	d87f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006524:	2b70      	cmp	r3, #112	@ 0x70
 8006526:	d01a      	beq.n	800655e <HAL_TIM_ConfigClockSource+0xa6>
 8006528:	2b70      	cmp	r3, #112	@ 0x70
 800652a:	d87b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b60      	cmp	r3, #96	@ 0x60
 800652e:	d050      	beq.n	80065d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006530:	2b60      	cmp	r3, #96	@ 0x60
 8006532:	d877      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b50      	cmp	r3, #80	@ 0x50
 8006536:	d03c      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006538:	2b50      	cmp	r3, #80	@ 0x50
 800653a:	d873      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	d058      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006540:	2b40      	cmp	r3, #64	@ 0x40
 8006542:	d86f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b30      	cmp	r3, #48	@ 0x30
 8006546:	d064      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006548:	2b30      	cmp	r3, #48	@ 0x30
 800654a:	d86b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d060      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	2b20      	cmp	r3, #32
 8006552:	d867      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05c      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b10      	cmp	r3, #16
 800655a:	d05a      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 800655c:	e062      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f000 fb23 	bl	8006bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	609a      	str	r2, [r3, #8]
      break;
 800658a:	e04f      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f000 fb0c 	bl	8006bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ae:	609a      	str	r2, [r3, #8]
      break;
 80065b0:	e03c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	461a      	mov	r2, r3
 80065c0:	f000 fa80 	bl	8006ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2150      	movs	r1, #80	@ 0x50
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fad9 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 80065d0:	e02c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	461a      	mov	r2, r3
 80065e0:	f000 fa9f 	bl	8006b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2160      	movs	r1, #96	@ 0x60
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fac9 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 80065f0:	e01c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6859      	ldr	r1, [r3, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	461a      	mov	r2, r3
 8006600:	f000 fa60 	bl	8006ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2140      	movs	r1, #64	@ 0x40
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fab9 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 8006610:	e00c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f000 fab0 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 8006622:	e003      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e000      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800662a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a34      	ldr	r2, [pc, #208]	@ (8006790 <TIM_Base_SetConfig+0xe4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00f      	beq.n	80066e4 <TIM_Base_SetConfig+0x38>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ca:	d00b      	beq.n	80066e4 <TIM_Base_SetConfig+0x38>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a31      	ldr	r2, [pc, #196]	@ (8006794 <TIM_Base_SetConfig+0xe8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_Base_SetConfig+0x38>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a30      	ldr	r2, [pc, #192]	@ (8006798 <TIM_Base_SetConfig+0xec>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_Base_SetConfig+0x38>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a2f      	ldr	r2, [pc, #188]	@ (800679c <TIM_Base_SetConfig+0xf0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d108      	bne.n	80066f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a25      	ldr	r2, [pc, #148]	@ (8006790 <TIM_Base_SetConfig+0xe4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01b      	beq.n	8006736 <TIM_Base_SetConfig+0x8a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006704:	d017      	beq.n	8006736 <TIM_Base_SetConfig+0x8a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a22      	ldr	r2, [pc, #136]	@ (8006794 <TIM_Base_SetConfig+0xe8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <TIM_Base_SetConfig+0x8a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a21      	ldr	r2, [pc, #132]	@ (8006798 <TIM_Base_SetConfig+0xec>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00f      	beq.n	8006736 <TIM_Base_SetConfig+0x8a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a20      	ldr	r2, [pc, #128]	@ (800679c <TIM_Base_SetConfig+0xf0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00b      	beq.n	8006736 <TIM_Base_SetConfig+0x8a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a1f      	ldr	r2, [pc, #124]	@ (80067a0 <TIM_Base_SetConfig+0xf4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d007      	beq.n	8006736 <TIM_Base_SetConfig+0x8a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a1e      	ldr	r2, [pc, #120]	@ (80067a4 <TIM_Base_SetConfig+0xf8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <TIM_Base_SetConfig+0x8a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a1d      	ldr	r2, [pc, #116]	@ (80067a8 <TIM_Base_SetConfig+0xfc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d108      	bne.n	8006748 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800673c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a08      	ldr	r2, [pc, #32]	@ (8006790 <TIM_Base_SetConfig+0xe4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d103      	bne.n	800677c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	615a      	str	r2, [r3, #20]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40010000 	.word	0x40010000
 8006794:	40000400 	.word	0x40000400
 8006798:	40000800 	.word	0x40000800
 800679c:	40000c00 	.word	0x40000c00
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40014400 	.word	0x40014400
 80067a8:	40014800 	.word	0x40014800

080067ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 0302 	bic.w	r3, r3, #2
 80067f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a1c      	ldr	r2, [pc, #112]	@ (8006874 <TIM_OC1_SetConfig+0xc8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d10c      	bne.n	8006822 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0308 	bic.w	r3, r3, #8
 800680e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f023 0304 	bic.w	r3, r3, #4
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a13      	ldr	r2, [pc, #76]	@ (8006874 <TIM_OC1_SetConfig+0xc8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d111      	bne.n	800684e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	621a      	str	r2, [r3, #32]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	40010000 	.word	0x40010000

08006878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0210 	bic.w	r2, r3, #16
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f023 0320 	bic.w	r3, r3, #32
 80068c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a1e      	ldr	r2, [pc, #120]	@ (800694c <TIM_OC2_SetConfig+0xd4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d10d      	bne.n	80068f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a15      	ldr	r2, [pc, #84]	@ (800694c <TIM_OC2_SetConfig+0xd4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d113      	bne.n	8006924 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40010000 	.word	0x40010000

08006950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0303 	bic.w	r3, r3, #3
 8006986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a20 <TIM_OC3_SetConfig+0xd0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d10d      	bne.n	80069ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a14      	ldr	r2, [pc, #80]	@ (8006a20 <TIM_OC3_SetConfig+0xd0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d113      	bne.n	80069fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	621a      	str	r2, [r3, #32]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40010000 	.word	0x40010000

08006a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a10      	ldr	r2, [pc, #64]	@ (8006ac0 <TIM_OC4_SetConfig+0x9c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d109      	bne.n	8006a98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40010000 	.word	0x40010000

08006ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f023 0201 	bic.w	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 030a 	bic.w	r3, r3, #10
 8006b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b087      	sub	sp, #28
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0210 	bic.w	r2, r3, #16
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	031b      	lsls	r3, r3, #12
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f043 0307 	orr.w	r3, r3, #7
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e050      	b.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca8:	d013      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a16      	ldr	r2, [pc, #88]	@ (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a15      	ldr	r2, [pc, #84]	@ (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a13      	ldr	r2, [pc, #76]	@ (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d10c      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	40014000 	.word	0x40014000

08006d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e047      	b.n	8006dea <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fd f96a 	bl	8004048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2224      	movs	r2, #36	@ 0x24
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fded 	bl	800796c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006db0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0208 	orr.w	r2, r2, #8
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08a      	sub	sp, #40	@ 0x28
 8006df6:	af02      	add	r7, sp, #8
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d17c      	bne.n	8006f0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_UART_Transmit+0x2c>
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e075      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_UART_Transmit+0x3e>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e06e      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2221      	movs	r2, #33	@ 0x21
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e46:	f7fd f9ed 	bl	8004224 <HAL_GetTick>
 8006e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e60:	d108      	bne.n	8006e74 <HAL_UART_Transmit+0x82>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e003      	b.n	8006e7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8006e84:	e02a      	b.n	8006edc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2180      	movs	r1, #128	@ 0x80
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fb29 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e036      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	3302      	adds	r3, #2
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e007      	b.n	8006ece <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1cf      	bne.n	8006e86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2200      	movs	r2, #0
 8006eee:	2140      	movs	r1, #64	@ 0x40
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 faf9 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e006      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e000      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
  }
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	4613      	mov	r3, r2
 8006f22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d11d      	bne.n	8006f6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_UART_Receive_IT+0x26>
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e016      	b.n	8006f6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_UART_Receive_IT+0x38>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e00f      	b.n	8006f6e <HAL_UART_Receive_IT+0x58>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fb2e 	bl	80075c4 <UART_Start_Receive_IT>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	e000      	b.n	8006f6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b0ba      	sub	sp, #232	@ 0xe8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10f      	bne.n	8006fde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d009      	beq.n	8006fde <HAL_UART_IRQHandler+0x66>
 8006fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fc0d 	bl	80077f6 <UART_Receive_IT>
      return;
 8006fdc:	e256      	b.n	800748c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80de 	beq.w	80071a4 <HAL_UART_IRQHandler+0x22c>
 8006fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d106      	bne.n	8007002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80d1 	beq.w	80071a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00b      	beq.n	8007026 <HAL_UART_IRQHandler+0xae>
 800700e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	f043 0201 	orr.w	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <HAL_UART_IRQHandler+0xd2>
 8007032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	f043 0202 	orr.w	r2, r3, #2
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800704a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <HAL_UART_IRQHandler+0xf6>
 8007056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d005      	beq.n	800706e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	f043 0204 	orr.w	r2, r3, #4
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800706e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d011      	beq.n	800709e <HAL_UART_IRQHandler+0x126>
 800707a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007096:	f043 0208 	orr.w	r2, r3, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 81ed 	beq.w	8007482 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_UART_IRQHandler+0x14e>
 80070b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b8:	f003 0320 	and.w	r3, r3, #32
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fb98 	bl	80077f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d0:	2b40      	cmp	r3, #64	@ 0x40
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d103      	bne.n	80070f2 <HAL_UART_IRQHandler+0x17a>
 80070ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d04f      	beq.n	8007192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 faa0 	bl	8007638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007102:	2b40      	cmp	r3, #64	@ 0x40
 8007104:	d141      	bne.n	800718a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3314      	adds	r3, #20
 800710c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800711c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3314      	adds	r3, #20
 800712e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007132:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800713e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800714a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1d9      	bne.n	8007106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007156:	2b00      	cmp	r3, #0
 8007158:	d013      	beq.n	8007182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715e:	4a7d      	ldr	r2, [pc, #500]	@ (8007354 <HAL_UART_IRQHandler+0x3dc>)
 8007160:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fa29 	bl	80045be <HAL_DMA_Abort_IT>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d016      	beq.n	80071a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007180:	e00e      	b.n	80071a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f99a 	bl	80074bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007188:	e00a      	b.n	80071a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f996 	bl	80074bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	e006      	b.n	80071a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f992 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800719e:	e170      	b.n	8007482 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a0:	bf00      	nop
    return;
 80071a2:	e16e      	b.n	8007482 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	f040 814a 	bne.w	8007442 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 8143 	beq.w	8007442 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 813c 	beq.w	8007442 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ca:	2300      	movs	r3, #0
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ea:	2b40      	cmp	r3, #64	@ 0x40
 80071ec:	f040 80b4 	bne.w	8007358 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8140 	beq.w	8007486 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800720a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800720e:	429a      	cmp	r2, r3
 8007210:	f080 8139 	bcs.w	8007486 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800721a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007226:	f000 8088 	beq.w	800733a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	330c      	adds	r3, #12
 8007230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007256:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800725a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007262:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800726e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1d9      	bne.n	800722a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3314      	adds	r3, #20
 800727c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3314      	adds	r3, #20
 8007296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800729a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800729e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e1      	bne.n	8007276 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3314      	adds	r3, #20
 80072b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3314      	adds	r3, #20
 80072d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e3      	bne.n	80072b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	330c      	adds	r3, #12
 80072fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800730a:	f023 0310 	bic.w	r3, r3, #16
 800730e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	330c      	adds	r3, #12
 8007318:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800731c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800731e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007322:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800732a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e3      	bne.n	80072f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	4618      	mov	r0, r3
 8007336:	f7fd f8d2 	bl	80044de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007342:	b29b      	uxth	r3, r3
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	b29b      	uxth	r3, r3
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f8c0 	bl	80074d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007350:	e099      	b.n	8007486 <HAL_UART_IRQHandler+0x50e>
 8007352:	bf00      	nop
 8007354:	080076ff 	.word	0x080076ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007360:	b29b      	uxth	r3, r3
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 808b 	beq.w	800748a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8086 	beq.w	800748a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800738e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007394:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80073a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80073a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e3      	bne.n	800737e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	623b      	str	r3, [r7, #32]
   return(result);
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073da:	633a      	str	r2, [r7, #48]	@ 0x30
 80073dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e3      	bne.n	80073b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	60fb      	str	r3, [r7, #12]
   return(result);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0310 	bic.w	r3, r3, #16
 8007412:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007420:	61fa      	str	r2, [r7, #28]
 8007422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	69b9      	ldr	r1, [r7, #24]
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	617b      	str	r3, [r7, #20]
   return(result);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e3      	bne.n	80073fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f848 	bl	80074d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007440:	e023      	b.n	800748a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <HAL_UART_IRQHandler+0x4ea>
 800744e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f963 	bl	8007726 <UART_Transmit_IT>
    return;
 8007460:	e014      	b.n	800748c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00e      	beq.n	800748c <HAL_UART_IRQHandler+0x514>
 800746e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9a3 	bl	80077c6 <UART_EndTransmit_IT>
    return;
 8007480:	e004      	b.n	800748c <HAL_UART_IRQHandler+0x514>
    return;
 8007482:	bf00      	nop
 8007484:	e002      	b.n	800748c <HAL_UART_IRQHandler+0x514>
      return;
 8007486:	bf00      	nop
 8007488:	e000      	b.n	800748c <HAL_UART_IRQHandler+0x514>
      return;
 800748a:	bf00      	nop
  }
}
 800748c:	37e8      	adds	r7, #232	@ 0xe8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop

08007494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b090      	sub	sp, #64	@ 0x40
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f8:	e050      	b.n	800759c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	d04c      	beq.n	800759c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <UART_WaitOnFlagUntilTimeout+0x30>
 8007508:	f7fc fe8c 	bl	8004224 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007514:	429a      	cmp	r2, r3
 8007516:	d241      	bcs.n	800759c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	330c      	adds	r3, #12
 8007536:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007538:	637a      	str	r2, [r7, #52]	@ 0x34
 800753a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800753e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3314      	adds	r3, #20
 8007552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	613b      	str	r3, [r7, #16]
   return(result);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3314      	adds	r3, #20
 800756a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800756c:	623a      	str	r2, [r7, #32]
 800756e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	69f9      	ldr	r1, [r7, #28]
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	61bb      	str	r3, [r7, #24]
   return(result);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e5      	bne.n	800754c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e00f      	b.n	80075bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4013      	ands	r3, r2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d09f      	beq.n	80074fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3740      	adds	r7, #64	@ 0x40
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2222      	movs	r2, #34	@ 0x22
 80075ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007608:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f042 0201 	orr.w	r2, r2, #1
 8007618:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0220 	orr.w	r2, r2, #32
 8007628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b095      	sub	sp, #84	@ 0x54
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007660:	643a      	str	r2, [r7, #64]	@ 0x40
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3314      	adds	r3, #20
 800767a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	61fb      	str	r3, [r7, #28]
   return(result);
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3314      	adds	r3, #20
 8007692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800769a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e5      	bne.n	8007674 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d119      	bne.n	80076e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330c      	adds	r3, #12
 80076ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076d0:	61ba      	str	r2, [r7, #24]
 80076d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6979      	ldr	r1, [r7, #20]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	613b      	str	r3, [r7, #16]
   return(result);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e5      	bne.n	80076b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076f2:	bf00      	nop
 80076f4:	3754      	adds	r7, #84	@ 0x54
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7ff fecf 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b21      	cmp	r3, #33	@ 0x21
 8007738:	d13e      	bne.n	80077b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007742:	d114      	bne.n	800776e <UART_Transmit_IT+0x48>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d110      	bne.n	800776e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007760:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	1c9a      	adds	r2, r3, #2
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	621a      	str	r2, [r3, #32]
 800776c:	e008      	b.n	8007780 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	1c59      	adds	r1, r3, #1
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6211      	str	r1, [r2, #32]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29b      	uxth	r3, r3
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4619      	mov	r1, r3
 800778e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10f      	bne.n	80077b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	e000      	b.n	80077ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077b8:	2302      	movs	r3, #2
  }
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff fe54 	bl	8007494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b08c      	sub	sp, #48	@ 0x30
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b22      	cmp	r3, #34	@ 0x22
 8007808:	f040 80ab 	bne.w	8007962 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007814:	d117      	bne.n	8007846 <UART_Receive_IT+0x50>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d113      	bne.n	8007846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	b29b      	uxth	r3, r3
 8007830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007834:	b29a      	uxth	r2, r3
 8007836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783e:	1c9a      	adds	r2, r3, #2
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	629a      	str	r2, [r3, #40]	@ 0x28
 8007844:	e026      	b.n	8007894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007858:	d007      	beq.n	800786a <UART_Receive_IT+0x74>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <UART_Receive_IT+0x82>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	b2da      	uxtb	r2, r3
 8007872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e008      	b.n	800788a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007884:	b2da      	uxtb	r2, r3
 8007886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29b      	uxth	r3, r3
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4619      	mov	r1, r3
 80078a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d15a      	bne.n	800795e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0220 	bic.w	r2, r2, #32
 80078b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695a      	ldr	r2, [r3, #20]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0201 	bic.w	r2, r2, #1
 80078d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d135      	bne.n	8007954 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	613b      	str	r3, [r7, #16]
   return(result);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f023 0310 	bic.w	r3, r3, #16
 8007904:	627b      	str	r3, [r7, #36]	@ 0x24
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790e:	623a      	str	r2, [r7, #32]
 8007910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	69f9      	ldr	r1, [r7, #28]
 8007914:	6a3a      	ldr	r2, [r7, #32]
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	61bb      	str	r3, [r7, #24]
   return(result);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b10      	cmp	r3, #16
 800792e:	d10a      	bne.n	8007946 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff fdbf 	bl	80074d0 <HAL_UARTEx_RxEventCallback>
 8007952:	e002      	b.n	800795a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fda7 	bl	80074a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e002      	b.n	8007964 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e000      	b.n	8007964 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007962:	2302      	movs	r3, #2
  }
}
 8007964:	4618      	mov	r0, r3
 8007966:	3730      	adds	r7, #48	@ 0x30
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800796c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007970:	b0c0      	sub	sp, #256	@ 0x100
 8007972:	af00      	add	r7, sp, #0
 8007974:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007988:	68d9      	ldr	r1, [r3, #12]
 800798a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	ea40 0301 	orr.w	r3, r0, r1
 8007994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079c4:	f021 010c 	bic.w	r1, r1, #12
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079d2:	430b      	orrs	r3, r1
 80079d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80079e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e6:	6999      	ldr	r1, [r3, #24]
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	ea40 0301 	orr.w	r3, r0, r1
 80079f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b8f      	ldr	r3, [pc, #572]	@ (8007c38 <UART_SetConfig+0x2cc>)
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d005      	beq.n	8007a0c <UART_SetConfig+0xa0>
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b8d      	ldr	r3, [pc, #564]	@ (8007c3c <UART_SetConfig+0x2d0>)
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d104      	bne.n	8007a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a0c:	f7fd fc1c 	bl	8005248 <HAL_RCC_GetPCLK2Freq>
 8007a10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a14:	e003      	b.n	8007a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a16:	f7fd fc03 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 8007a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a28:	f040 810c 	bne.w	8007c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a3e:	4622      	mov	r2, r4
 8007a40:	462b      	mov	r3, r5
 8007a42:	1891      	adds	r1, r2, r2
 8007a44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a46:	415b      	adcs	r3, r3
 8007a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a4e:	4621      	mov	r1, r4
 8007a50:	eb12 0801 	adds.w	r8, r2, r1
 8007a54:	4629      	mov	r1, r5
 8007a56:	eb43 0901 	adc.w	r9, r3, r1
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a6e:	4690      	mov	r8, r2
 8007a70:	4699      	mov	r9, r3
 8007a72:	4623      	mov	r3, r4
 8007a74:	eb18 0303 	adds.w	r3, r8, r3
 8007a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	eb49 0303 	adc.w	r3, r9, r3
 8007a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	18db      	adds	r3, r3, r3
 8007a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	eb42 0303 	adc.w	r3, r2, r3
 8007aa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ab0:	f7f9 f880 	bl	8000bb4 <__aeabi_uldivmod>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4b61      	ldr	r3, [pc, #388]	@ (8007c40 <UART_SetConfig+0x2d4>)
 8007aba:	fba3 2302 	umull	r2, r3, r3, r2
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	011c      	lsls	r4, r3, #4
 8007ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007acc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	1891      	adds	r1, r2, r2
 8007ada:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007adc:	415b      	adcs	r3, r3
 8007ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ae4:	4641      	mov	r1, r8
 8007ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8007aea:	4649      	mov	r1, r9
 8007aec:	eb43 0b01 	adc.w	fp, r3, r1
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b04:	4692      	mov	sl, r2
 8007b06:	469b      	mov	fp, r3
 8007b08:	4643      	mov	r3, r8
 8007b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8007b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b12:	464b      	mov	r3, r9
 8007b14:	eb4b 0303 	adc.w	r3, fp, r3
 8007b18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b30:	460b      	mov	r3, r1
 8007b32:	18db      	adds	r3, r3, r3
 8007b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b36:	4613      	mov	r3, r2
 8007b38:	eb42 0303 	adc.w	r3, r2, r3
 8007b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b46:	f7f9 f835 	bl	8000bb4 <__aeabi_uldivmod>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4b3b      	ldr	r3, [pc, #236]	@ (8007c40 <UART_SetConfig+0x2d4>)
 8007b52:	fba3 2301 	umull	r2, r3, r3, r1
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	2264      	movs	r2, #100	@ 0x64
 8007b5a:	fb02 f303 	mul.w	r3, r2, r3
 8007b5e:	1acb      	subs	r3, r1, r3
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b66:	4b36      	ldr	r3, [pc, #216]	@ (8007c40 <UART_SetConfig+0x2d4>)
 8007b68:	fba3 2302 	umull	r2, r3, r3, r2
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b74:	441c      	add	r4, r3
 8007b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b88:	4642      	mov	r2, r8
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	1891      	adds	r1, r2, r2
 8007b8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b90:	415b      	adcs	r3, r3
 8007b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b98:	4641      	mov	r1, r8
 8007b9a:	1851      	adds	r1, r2, r1
 8007b9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	414b      	adcs	r3, r1
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007bb0:	4659      	mov	r1, fp
 8007bb2:	00cb      	lsls	r3, r1, #3
 8007bb4:	4651      	mov	r1, sl
 8007bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bba:	4651      	mov	r1, sl
 8007bbc:	00ca      	lsls	r2, r1, #3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	189b      	adds	r3, r3, r2
 8007bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bcc:	464b      	mov	r3, r9
 8007bce:	460a      	mov	r2, r1
 8007bd0:	eb42 0303 	adc.w	r3, r2, r3
 8007bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007be4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007bec:	460b      	mov	r3, r1
 8007bee:	18db      	adds	r3, r3, r3
 8007bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	eb42 0303 	adc.w	r3, r2, r3
 8007bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c02:	f7f8 ffd7 	bl	8000bb4 <__aeabi_uldivmod>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c40 <UART_SetConfig+0x2d4>)
 8007c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	2164      	movs	r1, #100	@ 0x64
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	3332      	adds	r3, #50	@ 0x32
 8007c1e:	4a08      	ldr	r2, [pc, #32]	@ (8007c40 <UART_SetConfig+0x2d4>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	f003 0207 	and.w	r2, r3, #7
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4422      	add	r2, r4
 8007c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c34:	e106      	b.n	8007e44 <UART_SetConfig+0x4d8>
 8007c36:	bf00      	nop
 8007c38:	40011000 	.word	0x40011000
 8007c3c:	40011400 	.word	0x40011400
 8007c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c56:	4642      	mov	r2, r8
 8007c58:	464b      	mov	r3, r9
 8007c5a:	1891      	adds	r1, r2, r2
 8007c5c:	6239      	str	r1, [r7, #32]
 8007c5e:	415b      	adcs	r3, r3
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c66:	4641      	mov	r1, r8
 8007c68:	1854      	adds	r4, r2, r1
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	eb43 0501 	adc.w	r5, r3, r1
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	00eb      	lsls	r3, r5, #3
 8007c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c7e:	00e2      	lsls	r2, r4, #3
 8007c80:	4614      	mov	r4, r2
 8007c82:	461d      	mov	r5, r3
 8007c84:	4643      	mov	r3, r8
 8007c86:	18e3      	adds	r3, r4, r3
 8007c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c8c:	464b      	mov	r3, r9
 8007c8e:	eb45 0303 	adc.w	r3, r5, r3
 8007c92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ca2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ca6:	f04f 0200 	mov.w	r2, #0
 8007caa:	f04f 0300 	mov.w	r3, #0
 8007cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	008b      	lsls	r3, r1, #2
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	008a      	lsls	r2, r1, #2
 8007cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007cc4:	f7f8 ff76 	bl	8000bb4 <__aeabi_uldivmod>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4b60      	ldr	r3, [pc, #384]	@ (8007e50 <UART_SetConfig+0x4e4>)
 8007cce:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	011c      	lsls	r4, r3, #4
 8007cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ce0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ce8:	4642      	mov	r2, r8
 8007cea:	464b      	mov	r3, r9
 8007cec:	1891      	adds	r1, r2, r2
 8007cee:	61b9      	str	r1, [r7, #24]
 8007cf0:	415b      	adcs	r3, r3
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	1851      	adds	r1, r2, r1
 8007cfc:	6139      	str	r1, [r7, #16]
 8007cfe:	4649      	mov	r1, r9
 8007d00:	414b      	adcs	r3, r1
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	f04f 0300 	mov.w	r3, #0
 8007d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d10:	4659      	mov	r1, fp
 8007d12:	00cb      	lsls	r3, r1, #3
 8007d14:	4651      	mov	r1, sl
 8007d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d1a:	4651      	mov	r1, sl
 8007d1c:	00ca      	lsls	r2, r1, #3
 8007d1e:	4610      	mov	r0, r2
 8007d20:	4619      	mov	r1, r3
 8007d22:	4603      	mov	r3, r0
 8007d24:	4642      	mov	r2, r8
 8007d26:	189b      	adds	r3, r3, r2
 8007d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	460a      	mov	r2, r1
 8007d30:	eb42 0303 	adc.w	r3, r2, r3
 8007d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d50:	4649      	mov	r1, r9
 8007d52:	008b      	lsls	r3, r1, #2
 8007d54:	4641      	mov	r1, r8
 8007d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d5a:	4641      	mov	r1, r8
 8007d5c:	008a      	lsls	r2, r1, #2
 8007d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d62:	f7f8 ff27 	bl	8000bb4 <__aeabi_uldivmod>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4b38      	ldr	r3, [pc, #224]	@ (8007e50 <UART_SetConfig+0x4e4>)
 8007d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	2264      	movs	r2, #100	@ 0x64
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	1acb      	subs	r3, r1, r3
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	3332      	adds	r3, #50	@ 0x32
 8007d80:	4a33      	ldr	r2, [pc, #204]	@ (8007e50 <UART_SetConfig+0x4e4>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	095b      	lsrs	r3, r3, #5
 8007d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d8c:	441c      	add	r4, r3
 8007d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d92:	2200      	movs	r2, #0
 8007d94:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d96:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d9c:	4642      	mov	r2, r8
 8007d9e:	464b      	mov	r3, r9
 8007da0:	1891      	adds	r1, r2, r2
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	415b      	adcs	r3, r3
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dac:	4641      	mov	r1, r8
 8007dae:	1851      	adds	r1, r2, r1
 8007db0:	6039      	str	r1, [r7, #0]
 8007db2:	4649      	mov	r1, r9
 8007db4:	414b      	adcs	r3, r1
 8007db6:	607b      	str	r3, [r7, #4]
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	f04f 0300 	mov.w	r3, #0
 8007dc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dc4:	4659      	mov	r1, fp
 8007dc6:	00cb      	lsls	r3, r1, #3
 8007dc8:	4651      	mov	r1, sl
 8007dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dce:	4651      	mov	r1, sl
 8007dd0:	00ca      	lsls	r2, r1, #3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4642      	mov	r2, r8
 8007dda:	189b      	adds	r3, r3, r2
 8007ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dde:	464b      	mov	r3, r9
 8007de0:	460a      	mov	r2, r1
 8007de2:	eb42 0303 	adc.w	r3, r2, r3
 8007de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007df2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e00:	4649      	mov	r1, r9
 8007e02:	008b      	lsls	r3, r1, #2
 8007e04:	4641      	mov	r1, r8
 8007e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	008a      	lsls	r2, r1, #2
 8007e0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e12:	f7f8 fecf 	bl	8000bb4 <__aeabi_uldivmod>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <UART_SetConfig+0x4e4>)
 8007e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	2164      	movs	r1, #100	@ 0x64
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	3332      	adds	r3, #50	@ 0x32
 8007e2e:	4a08      	ldr	r2, [pc, #32]	@ (8007e50 <UART_SetConfig+0x4e4>)
 8007e30:	fba2 2303 	umull	r2, r3, r2, r3
 8007e34:	095b      	lsrs	r3, r3, #5
 8007e36:	f003 020f 	and.w	r2, r3, #15
 8007e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4422      	add	r2, r4
 8007e42:	609a      	str	r2, [r3, #8]
}
 8007e44:	bf00      	nop
 8007e46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e50:	51eb851f 	.word	0x51eb851f

08007e54 <memset>:
 8007e54:	4402      	add	r2, r0
 8007e56:	4603      	mov	r3, r0
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d100      	bne.n	8007e5e <memset+0xa>
 8007e5c:	4770      	bx	lr
 8007e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e62:	e7f9      	b.n	8007e58 <memset+0x4>

08007e64 <__libc_init_array>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	4d0d      	ldr	r5, [pc, #52]	@ (8007e9c <__libc_init_array+0x38>)
 8007e68:	4c0d      	ldr	r4, [pc, #52]	@ (8007ea0 <__libc_init_array+0x3c>)
 8007e6a:	1b64      	subs	r4, r4, r5
 8007e6c:	10a4      	asrs	r4, r4, #2
 8007e6e:	2600      	movs	r6, #0
 8007e70:	42a6      	cmp	r6, r4
 8007e72:	d109      	bne.n	8007e88 <__libc_init_array+0x24>
 8007e74:	4d0b      	ldr	r5, [pc, #44]	@ (8007ea4 <__libc_init_array+0x40>)
 8007e76:	4c0c      	ldr	r4, [pc, #48]	@ (8007ea8 <__libc_init_array+0x44>)
 8007e78:	f000 f818 	bl	8007eac <_init>
 8007e7c:	1b64      	subs	r4, r4, r5
 8007e7e:	10a4      	asrs	r4, r4, #2
 8007e80:	2600      	movs	r6, #0
 8007e82:	42a6      	cmp	r6, r4
 8007e84:	d105      	bne.n	8007e92 <__libc_init_array+0x2e>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8c:	4798      	blx	r3
 8007e8e:	3601      	adds	r6, #1
 8007e90:	e7ee      	b.n	8007e70 <__libc_init_array+0xc>
 8007e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e96:	4798      	blx	r3
 8007e98:	3601      	adds	r6, #1
 8007e9a:	e7f2      	b.n	8007e82 <__libc_init_array+0x1e>
 8007e9c:	08007f90 	.word	0x08007f90
 8007ea0:	08007f90 	.word	0x08007f90
 8007ea4:	08007f90 	.word	0x08007f90
 8007ea8:	08007f94 	.word	0x08007f94

08007eac <_init>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	bf00      	nop
 8007eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb2:	bc08      	pop	{r3}
 8007eb4:	469e      	mov	lr, r3
 8007eb6:	4770      	bx	lr

08007eb8 <_fini>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	bf00      	nop
 8007ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ebe:	bc08      	pop	{r3}
 8007ec0:	469e      	mov	lr, r3
 8007ec2:	4770      	bx	lr
